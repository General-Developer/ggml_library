// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: unused_field, unused_element, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, library_private_types_in_public_api, camel_case_types, constant_identifier_names
import 'dart:ffi' as ffi;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
class GgmlLibrarySharedBindingsByGeneralDeveloper {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GgmlLibrarySharedBindingsByGeneralDeveloper(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GgmlLibrarySharedBindingsByGeneralDeveloper.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> get stdin => _stdin.value;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> get stdout => _stdout.value;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> fopencookie(
    ffi.Pointer<ffi.Void> __magic_cookie,
    ffi.Pointer<ffi.Char> __modes,
    cookie_io_functions_t __io_funcs,
  ) {
    return _fopencookie(
      __magic_cookie,
      __modes,
      __io_funcs,
    );
  }

  late final _fopencookiePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, cookie_io_functions_t)>>('fopencookie');
  late final _fopencookie = _fopencookiePtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          cookie_io_functions_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __f,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vasprintf(
      __ptr,
      __f,
      __arg,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int __asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return ___asprintf(
      __ptr,
      __fmt,
    );
  }

  late final ___asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('__asprintf');
  late final ___asprintf = ___asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _asprintf(
      __ptr,
      __fmt,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_abort(
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _ggml_abort(
      file,
      line,
      fmt,
    );
  }

  late final _ggml_abortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ggml_abort');
  late final _ggml_abort = _ggml_abortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_status_to_string(
    ggml_status status,
  ) {
    return _ggml_status_to_string(
      status.value,
    );
  }

  late final _ggml_status_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ggml_status_to_string');
  late final _ggml_status_to_string = _ggml_status_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  double ggml_fp16_to_fp32(
    int arg0,
  ) {
    return _ggml_fp16_to_fp32(
      arg0,
    );
  }

  late final _ggml_fp16_to_fp32Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ggml_fp16_t)>>(
          'ggml_fp16_to_fp32');
  late final _ggml_fp16_to_fp32 =
      _ggml_fp16_to_fp32Ptr.asFunction<double Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_fp32_to_fp16(
    double arg0,
  ) {
    return _ggml_fp32_to_fp16(
      arg0,
    );
  }

  late final _ggml_fp32_to_fp16Ptr =
      _lookup<ffi.NativeFunction<ggml_fp16_t Function(ffi.Float)>>(
          'ggml_fp32_to_fp16');
  late final _ggml_fp32_to_fp16 =
      _ggml_fp32_to_fp16Ptr.asFunction<int Function(double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_fp16_to_fp32_row(
    ffi.Pointer<ggml_fp16_t> arg0,
    ffi.Pointer<ffi.Float> arg1,
    int arg2,
  ) {
    return _ggml_fp16_to_fp32_row(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_fp16_to_fp32_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_fp16_t>, ffi.Pointer<ffi.Float>,
              ffi.Int64)>>('ggml_fp16_to_fp32_row');
  late final _ggml_fp16_to_fp32_row = _ggml_fp16_to_fp32_rowPtr.asFunction<
      void Function(ffi.Pointer<ggml_fp16_t>, ffi.Pointer<ffi.Float>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_fp32_to_fp16_row(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ggml_fp16_t> arg1,
    int arg2,
  ) {
    return _ggml_fp32_to_fp16_row(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_fp32_to_fp16_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_fp16_t>,
              ffi.Int64)>>('ggml_fp32_to_fp16_row');
  late final _ggml_fp32_to_fp16_row = _ggml_fp32_to_fp16_rowPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_fp16_t>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_bf16_t ggml_fp32_to_bf16(
    double arg0,
  ) {
    return _ggml_fp32_to_bf16(
      arg0,
    );
  }

  late final _ggml_fp32_to_bf16Ptr =
      _lookup<ffi.NativeFunction<ggml_bf16_t Function(ffi.Float)>>(
          'ggml_fp32_to_bf16');
  late final _ggml_fp32_to_bf16 =
      _ggml_fp32_to_bf16Ptr.asFunction<ggml_bf16_t Function(double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  double ggml_bf16_to_fp32(
    ggml_bf16_t arg0,
  ) {
    return _ggml_bf16_to_fp32(
      arg0,
    );
  }

  late final _ggml_bf16_to_fp32Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ggml_bf16_t)>>(
          'ggml_bf16_to_fp32');
  late final _ggml_bf16_to_fp32 =
      _ggml_bf16_to_fp32Ptr.asFunction<double Function(ggml_bf16_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_bf16_to_fp32_row(
    ffi.Pointer<ggml_bf16_t> arg0,
    ffi.Pointer<ffi.Float> arg1,
    int arg2,
  ) {
    return _ggml_bf16_to_fp32_row(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_bf16_to_fp32_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_bf16_t>, ffi.Pointer<ffi.Float>,
              ffi.Int64)>>('ggml_bf16_to_fp32_row');
  late final _ggml_bf16_to_fp32_row = _ggml_bf16_to_fp32_rowPtr.asFunction<
      void Function(ffi.Pointer<ggml_bf16_t>, ffi.Pointer<ffi.Float>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_fp32_to_bf16_row_ref(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ggml_bf16_t> arg1,
    int arg2,
  ) {
    return _ggml_fp32_to_bf16_row_ref(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_fp32_to_bf16_row_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>,
              ffi.Int64)>>('ggml_fp32_to_bf16_row_ref');
  late final _ggml_fp32_to_bf16_row_ref =
      _ggml_fp32_to_bf16_row_refPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_fp32_to_bf16_row(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ggml_bf16_t> arg1,
    int arg2,
  ) {
    return _ggml_fp32_to_bf16_row(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_fp32_to_bf16_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>,
              ffi.Int64)>>('ggml_fp32_to_bf16_row');
  late final _ggml_fp32_to_bf16_row = _ggml_fp32_to_bf16_rowPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>, int)>();

  late final ffi.Pointer<ffi.Size> _GGML_TENSOR_SIZE =
      _lookup<ffi.Size>('GGML_TENSOR_SIZE');

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int get GGML_TENSOR_SIZE => _GGML_TENSOR_SIZE.value;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_guid_matches(
    ggml_guid_t guid_a,
    ggml_guid_t guid_b,
  ) {
    return _ggml_guid_matches(
      guid_a,
      guid_b,
    );
  }

  late final _ggml_guid_matchesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ggml_guid_t, ggml_guid_t)>>(
          'ggml_guid_matches');
  late final _ggml_guid_matches = _ggml_guid_matchesPtr
      .asFunction<bool Function(ggml_guid_t, ggml_guid_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_time_init() {
    return _ggml_time_init();
  }

  late final _ggml_time_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_time_init');
  late final _ggml_time_init = _ggml_time_initPtr.asFunction<void Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_time_ms() {
    return _ggml_time_ms();
  }

  late final _ggml_time_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_time_ms');
  late final _ggml_time_ms = _ggml_time_msPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_time_us() {
    return _ggml_time_us();
  }

  late final _ggml_time_usPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_time_us');
  late final _ggml_time_us = _ggml_time_usPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cycles() {
    return _ggml_cycles();
  }

  late final _ggml_cyclesPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_cycles');
  late final _ggml_cycles = _ggml_cyclesPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cycles_per_ms() {
    return _ggml_cycles_per_ms();
  }

  late final _ggml_cycles_per_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_cycles_per_ms');
  late final _ggml_cycles_per_ms =
      _ggml_cycles_per_msPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<FILE> ggml_fopen(
    ffi.Pointer<ffi.Char> fname,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _ggml_fopen(
      fname,
      mode,
    );
  }

  late final _ggml_fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ggml_fopen');
  late final _ggml_fopen = _ggml_fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_print_object(
    ffi.Pointer<ggml_object> obj,
  ) {
    return _ggml_print_object(
      obj,
    );
  }

  late final _ggml_print_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_object>)>>(
          'ggml_print_object');
  late final _ggml_print_object = _ggml_print_objectPtr
      .asFunction<void Function(ffi.Pointer<ggml_object>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_print_objects(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_print_objects(
      ctx,
    );
  }

  late final _ggml_print_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_print_objects');
  late final _ggml_print_objects = _ggml_print_objectsPtr
      .asFunction<void Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_nelements(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nelements(
      tensor,
    );
  }

  late final _ggml_nelementsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nelements');
  late final _ggml_nelements =
      _ggml_nelementsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_nrows(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nrows(
      tensor,
    );
  }

  late final _ggml_nrowsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nrows');
  late final _ggml_nrows =
      _ggml_nrowsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_nbytes(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nbytes(
      tensor,
    );
  }

  late final _ggml_nbytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nbytes');
  late final _ggml_nbytes =
      _ggml_nbytesPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_nbytes_pad(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nbytes_pad(
      tensor,
    );
  }

  late final _ggml_nbytes_padPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nbytes_pad');
  late final _ggml_nbytes_pad =
      _ggml_nbytes_padPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_blck_size(
    ggml_type type,
  ) {
    return _ggml_blck_size(
      type.value,
    );
  }

  late final _ggml_blck_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.UnsignedInt)>>(
          'ggml_blck_size');
  late final _ggml_blck_size =
      _ggml_blck_sizePtr.asFunction<int Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_type_size(
    ggml_type type,
  ) {
    return _ggml_type_size(
      type.value,
    );
  }

  late final _ggml_type_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.UnsignedInt)>>(
          'ggml_type_size');
  late final _ggml_type_size =
      _ggml_type_sizePtr.asFunction<int Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_row_size(
    ggml_type type,
    int ne,
  ) {
    return _ggml_row_size(
      type.value,
      ne,
    );
  }

  late final _ggml_row_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.UnsignedInt, ffi.Int64)>>(
      'ggml_row_size');
  late final _ggml_row_size =
      _ggml_row_sizePtr.asFunction<int Function(int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  double ggml_type_sizef(
    ggml_type type,
  ) {
    return _ggml_type_sizef(
      type.value,
    );
  }

  late final _ggml_type_sizefPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.UnsignedInt)>>(
          'ggml_type_sizef');
  late final _ggml_type_sizef =
      _ggml_type_sizefPtr.asFunction<double Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_type_name(
    ggml_type type,
  ) {
    return _ggml_type_name(
      type.value,
    );
  }

  late final _ggml_type_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_type_name');
  late final _ggml_type_name =
      _ggml_type_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_op_name(
    ggml_op op,
  ) {
    return _ggml_op_name(
      op.value,
    );
  }

  late final _ggml_op_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_op_name');
  late final _ggml_op_name =
      _ggml_op_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_op_symbol(
    ggml_op op,
  ) {
    return _ggml_op_symbol(
      op.value,
    );
  }

  late final _ggml_op_symbolPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_op_symbol');
  late final _ggml_op_symbol =
      _ggml_op_symbolPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_unary_op_name(
    ggml_unary_op op,
  ) {
    return _ggml_unary_op_name(
      op.value,
    );
  }

  late final _ggml_unary_op_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_unary_op_name');
  late final _ggml_unary_op_name =
      _ggml_unary_op_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_op_desc(
    ffi.Pointer<ggml_tensor> t,
  ) {
    return _ggml_op_desc(
      t,
    );
  }

  late final _ggml_op_descPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_op_desc');
  late final _ggml_op_desc = _ggml_op_descPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_element_size(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_element_size(
      tensor,
    );
  }

  late final _ggml_element_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_element_size');
  late final _ggml_element_size = _ggml_element_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_quantized(
    ggml_type type,
  ) {
    return _ggml_is_quantized(
      type.value,
    );
  }

  late final _ggml_is_quantizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'ggml_is_quantized');
  late final _ggml_is_quantized =
      _ggml_is_quantizedPtr.asFunction<bool Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_type ggml_ftype_to_ggml_type(
    ggml_ftype ftype,
  ) {
    return ggml_type.fromValue(_ggml_ftype_to_ggml_type(
      ftype.value,
    ));
  }

  late final _ggml_ftype_to_ggml_typePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Int)>>(
          'ggml_ftype_to_ggml_type');
  late final _ggml_ftype_to_ggml_type =
      _ggml_ftype_to_ggml_typePtr.asFunction<int Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_transposed(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_transposed(
      tensor,
    );
  }

  late final _ggml_is_transposedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_transposed');
  late final _ggml_is_transposed = _ggml_is_transposedPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_permuted(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_permuted(
      tensor,
    );
  }

  late final _ggml_is_permutedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_permuted');
  late final _ggml_is_permuted = _ggml_is_permutedPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_empty(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_empty(
      tensor,
    );
  }

  late final _ggml_is_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_empty');
  late final _ggml_is_empty =
      _ggml_is_emptyPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_scalar(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_scalar(
      tensor,
    );
  }

  late final _ggml_is_scalarPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_scalar');
  late final _ggml_is_scalar =
      _ggml_is_scalarPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_vector(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_vector(
      tensor,
    );
  }

  late final _ggml_is_vectorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_vector');
  late final _ggml_is_vector =
      _ggml_is_vectorPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_matrix(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_matrix(
      tensor,
    );
  }

  late final _ggml_is_matrixPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_matrix');
  late final _ggml_is_matrix =
      _ggml_is_matrixPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_3d(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_3d(
      tensor,
    );
  }

  late final _ggml_is_3dPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_3d');
  late final _ggml_is_3d =
      _ggml_is_3dPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_n_dims(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_n_dims(
      tensor,
    );
  }

  late final _ggml_n_dimsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_n_dims');
  late final _ggml_n_dims =
      _ggml_n_dimsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_contiguous(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous(
      tensor,
    );
  }

  late final _ggml_is_contiguousPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous');
  late final _ggml_is_contiguous = _ggml_is_contiguousPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_contiguous_0(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous_0(
      tensor,
    );
  }

  late final _ggml_is_contiguous_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous_0');
  late final _ggml_is_contiguous_0 = _ggml_is_contiguous_0Ptr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_contiguous_1(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous_1(
      tensor,
    );
  }

  late final _ggml_is_contiguous_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous_1');
  late final _ggml_is_contiguous_1 = _ggml_is_contiguous_1Ptr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_contiguous_2(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous_2(
      tensor,
    );
  }

  late final _ggml_is_contiguous_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous_2');
  late final _ggml_is_contiguous_2 = _ggml_is_contiguous_2Ptr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_are_same_shape(
    ffi.Pointer<ggml_tensor> t0,
    ffi.Pointer<ggml_tensor> t1,
  ) {
    return _ggml_are_same_shape(
      t0,
      t1,
    );
  }

  late final _ggml_are_same_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_are_same_shape');
  late final _ggml_are_same_shape = _ggml_are_same_shapePtr.asFunction<
      bool Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_are_same_stride(
    ffi.Pointer<ggml_tensor> t0,
    ffi.Pointer<ggml_tensor> t1,
  ) {
    return _ggml_are_same_stride(
      t0,
      t1,
    );
  }

  late final _ggml_are_same_stridePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_are_same_stride');
  late final _ggml_are_same_stride = _ggml_are_same_stridePtr.asFunction<
      bool Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_can_repeat(
    ffi.Pointer<ggml_tensor> t0,
    ffi.Pointer<ggml_tensor> t1,
  ) {
    return _ggml_can_repeat(
      t0,
      t1,
    );
  }

  late final _ggml_can_repeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_can_repeat');
  late final _ggml_can_repeat = _ggml_can_repeatPtr.asFunction<
      bool Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_tensor_overhead() {
    return _ggml_tensor_overhead();
  }

  late final _ggml_tensor_overheadPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ggml_tensor_overhead');
  late final _ggml_tensor_overhead =
      _ggml_tensor_overheadPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_validate_row_data(
    ggml_type type,
    ffi.Pointer<ffi.Void> data,
    int nbytes,
  ) {
    return _ggml_validate_row_data(
      type.value,
      data,
      nbytes,
    );
  }

  late final _ggml_validate_row_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ggml_validate_row_data');
  late final _ggml_validate_row_data = _ggml_validate_row_dataPtr
      .asFunction<bool Function(int, ffi.Pointer<ffi.Void>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_context> ggml_init(
    ggml_init_params params,
  ) {
    return _ggml_init(
      params,
    );
  }

  late final _ggml_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_context> Function(ggml_init_params)>>('ggml_init');
  late final _ggml_init = _ggml_initPtr
      .asFunction<ffi.Pointer<ggml_context> Function(ggml_init_params)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_reset(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_reset(
      ctx,
    );
  }

  late final _ggml_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_reset');
  late final _ggml_reset =
      _ggml_resetPtr.asFunction<void Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_free(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_free(
      ctx,
    );
  }

  late final _ggml_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_free');
  late final _ggml_free =
      _ggml_freePtr.asFunction<void Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_used_mem(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_used_mem(
      ctx,
    );
  }

  late final _ggml_used_memPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_used_mem');
  late final _ggml_used_mem =
      _ggml_used_memPtr.asFunction<int Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_get_no_alloc(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_no_alloc(
      ctx,
    );
  }

  late final _ggml_get_no_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_no_alloc');
  late final _ggml_get_no_alloc = _ggml_get_no_allocPtr
      .asFunction<bool Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_no_alloc(
    ffi.Pointer<ggml_context> ctx,
    bool no_alloc,
  ) {
    return _ggml_set_no_alloc(
      ctx,
      no_alloc,
    );
  }

  late final _ggml_set_no_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_context>, ffi.Bool)>>('ggml_set_no_alloc');
  late final _ggml_set_no_alloc = _ggml_set_no_allocPtr
      .asFunction<void Function(ffi.Pointer<ggml_context>, bool)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Void> ggml_get_mem_buffer(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_mem_buffer(
      ctx,
    );
  }

  late final _ggml_get_mem_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_context>)>>('ggml_get_mem_buffer');
  late final _ggml_get_mem_buffer = _ggml_get_mem_bufferPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_get_mem_size(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_mem_size(
      ctx,
    );
  }

  late final _ggml_get_mem_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_mem_size');
  late final _ggml_get_mem_size = _ggml_get_mem_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_get_max_tensor_size(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_max_tensor_size(
      ctx,
    );
  }

  late final _ggml_get_max_tensor_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_max_tensor_size');
  late final _ggml_get_max_tensor_size = _ggml_get_max_tensor_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_new_tensor(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int n_dims,
    ffi.Pointer<ffi.Int64> ne,
  ) {
    return _ggml_new_tensor(
      ctx,
      type.value,
      n_dims,
      ne,
    );
  }

  late final _ggml_new_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Int64>)>>('ggml_new_tensor');
  late final _ggml_new_tensor = _ggml_new_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, ffi.Pointer<ffi.Int64>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_new_tensor_1d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
  ) {
    return _ggml_new_tensor_1d(
      ctx,
      type.value,
      ne0,
    );
  }

  late final _ggml_new_tensor_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.UnsignedInt, ffi.Int64)>>('ggml_new_tensor_1d');
  late final _ggml_new_tensor_1d = _ggml_new_tensor_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_new_tensor_2d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
    int ne1,
  ) {
    return _ggml_new_tensor_2d(
      ctx,
      type.value,
      ne0,
      ne1,
    );
  }

  late final _ggml_new_tensor_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.UnsignedInt, ffi.Int64, ffi.Int64)>>('ggml_new_tensor_2d');
  late final _ggml_new_tensor_2d = _ggml_new_tensor_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_new_tensor_3d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_new_tensor_3d(
      ctx,
      type.value,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_new_tensor_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.UnsignedInt,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_new_tensor_3d');
  late final _ggml_new_tensor_3d = _ggml_new_tensor_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_new_tensor_4d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_new_tensor_4d(
      ctx,
      type.value,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_new_tensor_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.UnsignedInt,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_new_tensor_4d');
  late final _ggml_new_tensor_4d = _ggml_new_tensor_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Void> ggml_new_buffer(
    ffi.Pointer<ggml_context> ctx,
    int nbytes,
  ) {
    return _ggml_new_buffer(
      ctx,
      nbytes,
    );
  }

  late final _ggml_new_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_context>, ffi.Size)>>('ggml_new_buffer');
  late final _ggml_new_buffer = _ggml_new_bufferPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_context>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_dup_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> src,
  ) {
    return _ggml_dup_tensor(
      ctx,
      src,
    );
  }

  late final _ggml_dup_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup_tensor');
  late final _ggml_dup_tensor = _ggml_dup_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_view_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> src,
  ) {
    return _ggml_view_tensor(
      ctx,
      src,
    );
  }

  late final _ggml_view_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_view_tensor');
  late final _ggml_view_tensor = _ggml_view_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_get_first_tensor(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_first_tensor(
      ctx,
    );
  }

  late final _ggml_get_first_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>)>>('ggml_get_first_tensor');
  late final _ggml_get_first_tensor = _ggml_get_first_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_get_next_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_next_tensor(
      ctx,
      tensor,
    );
  }

  late final _ggml_get_next_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_next_tensor');
  late final _ggml_get_next_tensor = _ggml_get_next_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_get_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_get_tensor(
      ctx,
      name,
    );
  }

  late final _ggml_get_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ffi.Char>)>>('ggml_get_tensor');
  late final _ggml_get_tensor = _ggml_get_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_unravel_index(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    ffi.Pointer<ffi.Int64> i0,
    ffi.Pointer<ffi.Int64> i1,
    ffi.Pointer<ffi.Int64> i2,
    ffi.Pointer<ffi.Int64> i3,
  ) {
    return _ggml_unravel_index(
      tensor,
      i,
      i0,
      i1,
      i2,
      i3,
    );
  }

  late final _ggml_unravel_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('ggml_unravel_index');
  late final _ggml_unravel_index = _ggml_unravel_indexPtr.asFunction<
      void Function(
          ffi.Pointer<ggml_tensor>,
          int,
          ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_unary_op ggml_get_unary_op(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return ggml_unary_op.fromValue(_ggml_get_unary_op(
      tensor,
    ));
  }

  late final _ggml_get_unary_opPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ggml_tensor>)>>(
      'ggml_get_unary_op');
  late final _ggml_get_unary_op = _ggml_get_unary_opPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Void> ggml_get_data(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_data(
      tensor,
    );
  }

  late final _ggml_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_data');
  late final _ggml_get_data = _ggml_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Float> ggml_get_data_f32(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_data_f32(
      tensor,
    );
  }

  late final _ggml_get_data_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_data_f32');
  late final _ggml_get_data_f32 = _ggml_get_data_f32Ptr
      .asFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_get_name(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_name(
      tensor,
    );
  }

  late final _ggml_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_name');
  late final _ggml_get_name = _ggml_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_name(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_set_name(
      tensor,
      name,
    );
  }

  late final _ggml_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Char>)>>('ggml_set_name');
  late final _ggml_set_name = _ggml_set_namePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_format_name(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _ggml_format_name(
      tensor,
      fmt,
    );
  }

  late final _ggml_format_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Char>)>>('ggml_format_name');
  late final _ggml_format_name = _ggml_format_namePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_input(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_input(
      tensor,
    );
  }

  late final _ggml_set_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_set_input');
  late final _ggml_set_input =
      _ggml_set_inputPtr.asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_output(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_output(
      tensor,
    );
  }

  late final _ggml_set_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_set_output');
  late final _ggml_set_output =
      _ggml_set_outputPtr.asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_param(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_param(
      ctx,
      tensor,
    );
  }

  late final _ggml_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_set_param');
  late final _ggml_set_param = _ggml_set_paramPtr.asFunction<
      void Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_loss(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_loss(
      tensor,
    );
  }

  late final _ggml_set_lossPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_set_loss');
  late final _ggml_set_loss =
      _ggml_set_lossPtr.asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_dup(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_dup(
      ctx,
      a,
    );
  }

  late final _ggml_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup');
  late final _ggml_dup = _ggml_dupPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_dup_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_dup_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_dup_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup_inplace');
  late final _ggml_dup_inplace = _ggml_dup_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_add(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_add');
  late final _ggml_add = _ggml_addPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_add_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add_inplace');
  late final _ggml_add_inplace = _ggml_add_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_add_cast(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_type type,
  ) {
    return _ggml_add_cast(
      ctx,
      a,
      b,
      type.value,
    );
  }

  late final _ggml_add_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_add_cast');
  late final _ggml_add_cast = _ggml_add_castPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_add1(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add1(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add1');
  late final _ggml_add1 = _ggml_add1Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_add1_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add1_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add1_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add1_inplace');
  late final _ggml_add1_inplace = _ggml_add1_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_acc(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_acc(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_accPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_acc');
  late final _ggml_acc = _ggml_accPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_acc_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_acc_inplace(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_acc_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_acc_inplace');
  late final _ggml_acc_inplace = _ggml_acc_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sub(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_sub(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_sub');
  late final _ggml_sub = _ggml_subPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sub_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_sub_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_sub_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sub_inplace');
  late final _ggml_sub_inplace = _ggml_sub_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_mul(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_mul');
  late final _ggml_mul = _ggml_mulPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_mul_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mul_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_inplace');
  late final _ggml_mul_inplace = _ggml_mul_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_div(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_div(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_div');
  late final _ggml_div = _ggml_divPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_div_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_div_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_div_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_div_inplace');
  late final _ggml_div_inplace = _ggml_div_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sqr(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqr(
      ctx,
      a,
    );
  }

  late final _ggml_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqr');
  late final _ggml_sqr = _ggml_sqrPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sqr_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqr_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sqr_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqr_inplace');
  late final _ggml_sqr_inplace = _ggml_sqr_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sqrt(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqrt(
      ctx,
      a,
    );
  }

  late final _ggml_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqrt');
  late final _ggml_sqrt = _ggml_sqrtPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sqrt_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqrt_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sqrt_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqrt_inplace');
  late final _ggml_sqrt_inplace = _ggml_sqrt_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_log(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_log(
      ctx,
      a,
    );
  }

  late final _ggml_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_log');
  late final _ggml_log = _ggml_logPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_log_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_log_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_log_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_log_inplace');
  late final _ggml_log_inplace = _ggml_log_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sin(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sin(
      ctx,
      a,
    );
  }

  late final _ggml_sinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sin');
  late final _ggml_sin = _ggml_sinPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sin_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sin_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sin_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sin_inplace');
  late final _ggml_sin_inplace = _ggml_sin_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cos(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_cos(
      ctx,
      a,
    );
  }

  late final _ggml_cosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cos');
  late final _ggml_cos = _ggml_cosPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cos_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_cos_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_cos_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cos_inplace');
  late final _ggml_cos_inplace = _ggml_cos_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sum(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sum(
      ctx,
      a,
    );
  }

  late final _ggml_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sum');
  late final _ggml_sum = _ggml_sumPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sum_rows(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sum_rows(
      ctx,
      a,
    );
  }

  late final _ggml_sum_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sum_rows');
  late final _ggml_sum_rows = _ggml_sum_rowsPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_mean(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_mean(
      ctx,
      a,
    );
  }

  late final _ggml_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mean');
  late final _ggml_mean = _ggml_meanPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_argmax(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_argmax(
      ctx,
      a,
    );
  }

  late final _ggml_argmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_argmax');
  late final _ggml_argmax = _ggml_argmaxPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_count_equal(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_count_equal(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_count_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_count_equal');
  late final _ggml_count_equal = _ggml_count_equalPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_repeat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_repeat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_repeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_repeat');
  late final _ggml_repeat = _ggml_repeatPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_repeat_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_repeat_back(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_repeat_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_repeat_back');
  late final _ggml_repeat_back = _ggml_repeat_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_concat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int dim,
  ) {
    return _ggml_concat(
      ctx,
      a,
      b,
      dim,
    );
  }

  late final _ggml_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_concat');
  late final _ggml_concat = _ggml_concatPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_abs(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_abs(
      ctx,
      a,
    );
  }

  late final _ggml_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_abs');
  late final _ggml_abs = _ggml_absPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_abs_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_abs_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_abs_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_abs_inplace');
  late final _ggml_abs_inplace = _ggml_abs_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sgn(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sgn(
      ctx,
      a,
    );
  }

  late final _ggml_sgnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sgn');
  late final _ggml_sgn = _ggml_sgnPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sgn_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sgn_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sgn_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sgn_inplace');
  late final _ggml_sgn_inplace = _ggml_sgn_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_neg(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_neg(
      ctx,
      a,
    );
  }

  late final _ggml_negPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_neg');
  late final _ggml_neg = _ggml_negPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_neg_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_neg_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_neg_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_neg_inplace');
  late final _ggml_neg_inplace = _ggml_neg_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_step(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_step(
      ctx,
      a,
    );
  }

  late final _ggml_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_step');
  late final _ggml_step = _ggml_stepPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_step_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_step_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_step_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_step_inplace');
  late final _ggml_step_inplace = _ggml_step_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_tanh(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_tanh(
      ctx,
      a,
    );
  }

  late final _ggml_tanhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_tanh');
  late final _ggml_tanh = _ggml_tanhPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_tanh_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_tanh_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_tanh_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_tanh_inplace');
  late final _ggml_tanh_inplace = _ggml_tanh_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_elu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_elu(
      ctx,
      a,
    );
  }

  late final _ggml_eluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_elu');
  late final _ggml_elu = _ggml_eluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_elu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_elu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_elu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_elu_inplace');
  late final _ggml_elu_inplace = _ggml_elu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_relu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_relu(
      ctx,
      a,
    );
  }

  late final _ggml_reluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_relu');
  late final _ggml_relu = _ggml_reluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_leaky_relu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double negative_slope,
    bool inplace,
  ) {
    return _ggml_leaky_relu(
      ctx,
      a,
      negative_slope,
      inplace,
    );
  }

  late final _ggml_leaky_reluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Bool)>>('ggml_leaky_relu');
  late final _ggml_leaky_relu = _ggml_leaky_reluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double, bool)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_relu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_relu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_relu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_relu_inplace');
  late final _ggml_relu_inplace = _ggml_relu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sigmoid(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sigmoid(
      ctx,
      a,
    );
  }

  late final _ggml_sigmoidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sigmoid');
  late final _ggml_sigmoid = _ggml_sigmoidPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_sigmoid_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sigmoid_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sigmoid_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sigmoid_inplace');
  late final _ggml_sigmoid_inplace = _ggml_sigmoid_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_gelu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu(
      ctx,
      a,
    );
  }

  late final _ggml_geluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu');
  late final _ggml_gelu = _ggml_geluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_gelu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_inplace');
  late final _ggml_gelu_inplace = _ggml_gelu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_gelu_quick(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_quick(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_quick');
  late final _ggml_gelu_quick = _ggml_gelu_quickPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_gelu_quick_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_quick_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_quick_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_quick_inplace');
  late final _ggml_gelu_quick_inplace = _ggml_gelu_quick_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_silu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_silu(
      ctx,
      a,
    );
  }

  late final _ggml_siluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu');
  late final _ggml_silu = _ggml_siluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_silu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_silu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_silu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu_inplace');
  late final _ggml_silu_inplace = _ggml_silu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_silu_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_silu_back(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_silu_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu_back');
  late final _ggml_silu_back = _ggml_silu_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_hardswish(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_hardswish(
      ctx,
      a,
    );
  }

  late final _ggml_hardswishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_hardswish');
  late final _ggml_hardswish = _ggml_hardswishPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_hardsigmoid(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_hardsigmoid(
      ctx,
      a,
    );
  }

  late final _ggml_hardsigmoidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_hardsigmoid');
  late final _ggml_hardsigmoid = _ggml_hardsigmoidPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_exp(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_exp(
      ctx,
      a,
    );
  }

  late final _ggml_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_exp');
  late final _ggml_exp = _ggml_expPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_exp_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_exp_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_exp_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_exp_inplace');
  late final _ggml_exp_inplace = _ggml_exp_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_norm(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_norm');
  late final _ggml_norm = _ggml_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_norm_inplace(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_norm_inplace');
  late final _ggml_norm_inplace = _ggml_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rms_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_rms_norm(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_rms_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_rms_norm');
  late final _ggml_rms_norm = _ggml_rms_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rms_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_rms_norm_inplace(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_rms_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_rms_norm_inplace');
  late final _ggml_rms_norm_inplace = _ggml_rms_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_group_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_groups,
    double eps,
  ) {
    return _ggml_group_norm(
      ctx,
      a,
      n_groups,
      eps,
    );
  }

  late final _ggml_group_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Float)>>('ggml_group_norm');
  late final _ggml_group_norm = _ggml_group_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_group_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_groups,
    double eps,
  ) {
    return _ggml_group_norm_inplace(
      ctx,
      a,
      n_groups,
      eps,
    );
  }

  late final _ggml_group_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Float)>>('ggml_group_norm_inplace');
  late final _ggml_group_norm_inplace = _ggml_group_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rms_norm_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    double eps,
  ) {
    return _ggml_rms_norm_back(
      ctx,
      a,
      b,
      eps,
    );
  }

  late final _ggml_rms_norm_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float)>>('ggml_rms_norm_back');
  late final _ggml_rms_norm_back = _ggml_rms_norm_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_mul_mat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul_mat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mul_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_mat');
  late final _ggml_mul_mat = _ggml_mul_matPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_mul_mat_set_prec(
    ffi.Pointer<ggml_tensor> a,
    ggml_prec prec,
  ) {
    return _ggml_mul_mat_set_prec(
      a,
      prec.value,
    );
  }

  late final _ggml_mul_mat_set_precPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_mul_mat_set_prec');
  late final _ggml_mul_mat_set_prec = _ggml_mul_mat_set_precPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_mul_mat_id(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> as1,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> ids,
  ) {
    return _ggml_mul_mat_id(
      ctx,
      as1,
      b,
      ids,
    );
  }

  late final _ggml_mul_mat_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_mat_id');
  late final _ggml_mul_mat_id = _ggml_mul_mat_idPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_out_prod(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_out_prod(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_out_prodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_out_prod');
  late final _ggml_out_prod = _ggml_out_prodPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_scale(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double s,
  ) {
    return _ggml_scale(
      ctx,
      a,
      s,
    );
  }

  late final _ggml_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_scale');
  late final _ggml_scale = _ggml_scalePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_scale_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double s,
  ) {
    return _ggml_scale_inplace(
      ctx,
      a,
      s,
    );
  }

  late final _ggml_scale_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_scale_inplace');
  late final _ggml_scale_inplace = _ggml_scale_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_set(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_set');
  late final _ggml_set = _ggml_setPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_set_inplace(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_set_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_set_inplace');
  late final _ggml_set_inplace = _ggml_set_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int offset,
  ) {
    return _ggml_set_1d(
      ctx,
      a,
      b,
      offset,
    );
  }

  late final _ggml_set_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size)>>('ggml_set_1d');
  late final _ggml_set_1d = _ggml_set_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_1d_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int offset,
  ) {
    return _ggml_set_1d_inplace(
      ctx,
      a,
      b,
      offset,
    );
  }

  late final _ggml_set_1d_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size)>>('ggml_set_1d_inplace');
  late final _ggml_set_1d_inplace = _ggml_set_1d_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int offset,
  ) {
    return _ggml_set_2d(
      ctx,
      a,
      b,
      nb1,
      offset,
    );
  }

  late final _ggml_set_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size)>>('ggml_set_2d');
  late final _ggml_set_2d = _ggml_set_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_2d_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int offset,
  ) {
    return _ggml_set_2d_inplace(
      ctx,
      a,
      b,
      nb1,
      offset,
    );
  }

  late final _ggml_set_2d_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size)>>('ggml_set_2d_inplace');
  late final _ggml_set_2d_inplace = _ggml_set_2d_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cpy(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_cpy(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_cpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_cpy');
  late final _ggml_cpy = _ggml_cpyPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cast(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_type type,
  ) {
    return _ggml_cast(
      ctx,
      a,
      type.value,
    );
  }

  late final _ggml_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.UnsignedInt)>>('ggml_cast');
  late final _ggml_cast = _ggml_castPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cont(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_cont(
      ctx,
      a,
    );
  }

  late final _ggml_contPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cont');
  late final _ggml_cont = _ggml_contPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cont_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
  ) {
    return _ggml_cont_1d(
      ctx,
      a,
      ne0,
    );
  }

  late final _ggml_cont_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64)>>('ggml_cont_1d');
  late final _ggml_cont_1d = _ggml_cont_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cont_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
  ) {
    return _ggml_cont_2d(
      ctx,
      a,
      ne0,
      ne1,
    );
  }

  late final _ggml_cont_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64, ffi.Int64)>>('ggml_cont_2d');
  late final _ggml_cont_2d = _ggml_cont_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cont_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_cont_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_cont_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_cont_3d');
  late final _ggml_cont_3d = _ggml_cont_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cont_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_cont_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_cont_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_cont_4d');
  late final _ggml_cont_4d = _ggml_cont_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_reshape(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_reshape(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_reshapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_reshape');
  late final _ggml_reshape = _ggml_reshapePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_reshape_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
  ) {
    return _ggml_reshape_1d(
      ctx,
      a,
      ne0,
    );
  }

  late final _ggml_reshape_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64)>>('ggml_reshape_1d');
  late final _ggml_reshape_1d = _ggml_reshape_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_reshape_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
  ) {
    return _ggml_reshape_2d(
      ctx,
      a,
      ne0,
      ne1,
    );
  }

  late final _ggml_reshape_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_2d');
  late final _ggml_reshape_2d = _ggml_reshape_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_reshape_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_reshape_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_reshape_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_3d');
  late final _ggml_reshape_3d = _ggml_reshape_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_reshape_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_reshape_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_reshape_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_4d');
  late final _ggml_reshape_4d = _ggml_reshape_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_view_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int offset,
  ) {
    return _ggml_view_1d(
      ctx,
      a,
      ne0,
      offset,
    );
  }

  late final _ggml_view_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64, ffi.Size)>>('ggml_view_1d');
  late final _ggml_view_1d = _ggml_view_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_view_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int nb1,
    int offset,
  ) {
    return _ggml_view_2d(
      ctx,
      a,
      ne0,
      ne1,
      nb1,
      offset,
    );
  }

  late final _ggml_view_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size)>>('ggml_view_2d');
  late final _ggml_view_2d = _ggml_view_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_view_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int nb1,
    int nb2,
    int offset,
  ) {
    return _ggml_view_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      nb1,
      nb2,
      offset,
    );
  }

  late final _ggml_view_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_view_3d');
  late final _ggml_view_3d = _ggml_view_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_view_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_view_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_view_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_view_4d');
  late final _ggml_view_4d = _ggml_view_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_permute(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int axis0,
    int axis1,
    int axis2,
    int axis3,
  ) {
    return _ggml_permute(
      ctx,
      a,
      axis0,
      axis1,
      axis2,
      axis3,
    );
  }

  late final _ggml_permutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_permute');
  late final _ggml_permute = _ggml_permutePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_transpose(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_transpose(
      ctx,
      a,
    );
  }

  late final _ggml_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_transpose');
  late final _ggml_transpose = _ggml_transposePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_get_rows(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_get_rows(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_get_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_rows');
  late final _ggml_get_rows = _ggml_get_rowsPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_get_rows_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_get_rows_back(
      ctx,
      a,
      b,
      c,
    );
  }

  late final _ggml_get_rows_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_rows_back');
  late final _ggml_get_rows_back = _ggml_get_rows_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_diag(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_diag(
      ctx,
      a,
    );
  }

  late final _ggml_diagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_diag');
  late final _ggml_diag = _ggml_diagPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_diag_mask_inf(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_inf(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_infPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_diag_mask_inf');
  late final _ggml_diag_mask_inf = _ggml_diag_mask_infPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_diag_mask_inf_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_inf_inplace(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_inf_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_diag_mask_inf_inplace');
  late final _ggml_diag_mask_inf_inplace =
      _ggml_diag_mask_inf_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_diag_mask_zero(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_zero(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_diag_mask_zero');
  late final _ggml_diag_mask_zero = _ggml_diag_mask_zeroPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_diag_mask_zero_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_zero_inplace(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_zero_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_diag_mask_zero_inplace');
  late final _ggml_diag_mask_zero_inplace =
      _ggml_diag_mask_zero_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_soft_max(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_soft_max(
      ctx,
      a,
    );
  }

  late final _ggml_soft_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max');
  late final _ggml_soft_max = _ggml_soft_maxPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_soft_max_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_soft_max_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_soft_max_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max_inplace');
  late final _ggml_soft_max_inplace = _ggml_soft_max_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_soft_max_ext(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> mask,
    double scale,
    double max_bias,
  ) {
    return _ggml_soft_max_ext(
      ctx,
      a,
      mask,
      scale,
      max_bias,
    );
  }

  late final _ggml_soft_max_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float)>>('ggml_soft_max_ext');
  late final _ggml_soft_max_ext = _ggml_soft_max_extPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_soft_max_ext_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    double scale,
    double max_bias,
  ) {
    return _ggml_soft_max_ext_back(
      ctx,
      a,
      b,
      scale,
      max_bias,
    );
  }

  late final _ggml_soft_max_ext_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float)>>('ggml_soft_max_ext_back');
  late final _ggml_soft_max_ext_back = _ggml_soft_max_ext_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_soft_max_ext_back_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    double scale,
    double max_bias,
  ) {
    return _ggml_soft_max_ext_back_inplace(
      ctx,
      a,
      b,
      scale,
      max_bias,
    );
  }

  late final _ggml_soft_max_ext_back_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float)>>('ggml_soft_max_ext_back_inplace');
  late final _ggml_soft_max_ext_back_inplace =
      _ggml_soft_max_ext_back_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              double,
              double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int n_dims,
    int mode,
  ) {
    return _ggml_rope(
      ctx,
      a,
      b,
      n_dims,
      mode,
    );
  }

  late final _ggml_ropePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_rope');
  late final _ggml_rope = _ggml_ropePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int n_dims,
    int mode,
  ) {
    return _ggml_rope_inplace(
      ctx,
      a,
      b,
      n_dims,
      mode,
    );
  }

  late final _ggml_rope_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_rope_inplace');
  late final _ggml_rope_inplace = _ggml_rope_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope_ext(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_ext(
      ctx,
      a,
      b,
      c,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_ext');
  late final _ggml_rope_ext = _ggml_rope_extPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope_multi(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    ffi.Pointer<ffi.Int> sections,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_multi(
      ctx,
      a,
      b,
      c,
      n_dims,
      sections,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_multiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_multi');
  late final _ggml_rope_multi = _ggml_rope_multiPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          ffi.Pointer<ffi.Int>,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope_ext_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_ext_inplace(
      ctx,
      a,
      b,
      c,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_ext_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_ext_inplace');
  late final _ggml_rope_ext_inplace = _ggml_rope_ext_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope_custom(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_custom(
      ctx,
      a,
      b,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_custom');
  late final _ggml_rope_custom = _ggml_rope_customPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope_custom_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_custom_inplace(
      ctx,
      a,
      b,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_custom_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_custom_inplace');
  late final _ggml_rope_custom_inplace =
      _ggml_rope_custom_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              int,
              int,
              int,
              double,
              double,
              double,
              double,
              double,
              double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_rope_yarn_corr_dims(
    int n_dims,
    int n_ctx_orig,
    double freq_base,
    double beta_fast,
    double beta_slow,
    ffi.Pointer<ffi.Float> dims,
  ) {
    return _ggml_rope_yarn_corr_dims(
      n_dims,
      n_ctx_orig,
      freq_base,
      beta_fast,
      beta_slow,
      dims,
    );
  }

  late final _ggml_rope_yarn_corr_dimsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, ffi.Float, ffi.Float,
              ffi.Pointer<ffi.Float>)>>('ggml_rope_yarn_corr_dims');
  late final _ggml_rope_yarn_corr_dims =
      _ggml_rope_yarn_corr_dimsPtr.asFunction<
          void Function(
              int, int, double, double, double, ffi.Pointer<ffi.Float>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope_ext_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_ext_back(
      ctx,
      a,
      b,
      c,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_ext_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_ext_back');
  late final _ggml_rope_ext_back = _ggml_rope_ext_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rope_multi_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    ffi.Pointer<ffi.Int> sections,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_multi_back(
      ctx,
      a,
      b,
      c,
      n_dims,
      sections,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_multi_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_multi_back');
  late final _ggml_rope_multi_back = _ggml_rope_multi_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          ffi.Pointer<ffi.Int>,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_clamp(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double min,
    double max,
  ) {
    return _ggml_clamp(
      ctx,
      a,
      min,
      max,
    );
  }

  late final _ggml_clampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float, ffi.Float)>>('ggml_clamp');
  late final _ggml_clamp = _ggml_clampPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, double, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_im2col(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
    bool is_2D,
    ggml_type dst_type,
  ) {
    return _ggml_im2col(
      ctx,
      a,
      b,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
      is_2D,
      dst_type.value,
    );
  }

  late final _ggml_im2colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.UnsignedInt)>>('ggml_im2col');
  late final _ggml_im2col = _ggml_im2colPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int,
          bool,
          int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_im2col_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ffi.Int64> ne,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
    bool is_2D,
  ) {
    return _ggml_im2col_back(
      ctx,
      a,
      b,
      ne,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
      is_2D,
    );
  }

  late final _ggml_im2col_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>>('ggml_im2col_back');
  late final _ggml_im2col_back = _ggml_im2col_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ffi.Int64>,
          int,
          int,
          int,
          int,
          int,
          int,
          bool)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int p0,
    int d0,
  ) {
    return _ggml_conv_1d(
      ctx,
      a,
      b,
      s0,
      p0,
      d0,
    );
  }

  late final _ggml_conv_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d');
  late final _ggml_conv_1d = _ggml_conv_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_1d_ph(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s,
    int d,
  ) {
    return _ggml_conv_1d_ph(
      ctx,
      a,
      b,
      s,
      d,
    );
  }

  late final _ggml_conv_1d_phPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d_ph');
  late final _ggml_conv_1d_ph = _ggml_conv_1d_phPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_1d_dw(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int p0,
    int d0,
  ) {
    return _ggml_conv_1d_dw(
      ctx,
      a,
      b,
      s0,
      p0,
      d0,
    );
  }

  late final _ggml_conv_1d_dwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d_dw');
  late final _ggml_conv_1d_dw = _ggml_conv_1d_dwPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_1d_dw_ph(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int d0,
  ) {
    return _ggml_conv_1d_dw_ph(
      ctx,
      a,
      b,
      s0,
      d0,
    );
  }

  late final _ggml_conv_1d_dw_phPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d_dw_ph');
  late final _ggml_conv_1d_dw_ph = _ggml_conv_1d_dw_phPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_transpose_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int p0,
    int d0,
  ) {
    return _ggml_conv_transpose_1d(
      ctx,
      a,
      b,
      s0,
      p0,
      d0,
    );
  }

  late final _ggml_conv_transpose_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_transpose_1d');
  late final _ggml_conv_transpose_1d = _ggml_conv_transpose_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
  ) {
    return _ggml_conv_2d(
      ctx,
      a,
      b,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
    );
  }

  late final _ggml_conv_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_2d');
  late final _ggml_conv_2d = _ggml_conv_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_2d_sk_p0(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_conv_2d_sk_p0(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_conv_2d_sk_p0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_conv_2d_sk_p0');
  late final _ggml_conv_2d_sk_p0 = _ggml_conv_2d_sk_p0Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_2d_s1_ph(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_conv_2d_s1_ph(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_conv_2d_s1_phPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_conv_2d_s1_ph');
  late final _ggml_conv_2d_s1_ph = _ggml_conv_2d_s1_phPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_2d_dw(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
  ) {
    return _ggml_conv_2d_dw(
      ctx,
      a,
      b,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
    );
  }

  late final _ggml_conv_2d_dwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_2d_dw');
  late final _ggml_conv_2d_dw = _ggml_conv_2d_dwPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_conv_transpose_2d_p0(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int stride,
  ) {
    return _ggml_conv_transpose_2d_p0(
      ctx,
      a,
      b,
      stride,
    );
  }

  late final _ggml_conv_transpose_2d_p0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_conv_transpose_2d_p0');
  late final _ggml_conv_transpose_2d_p0 =
      _ggml_conv_transpose_2d_p0Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_pool_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_op_pool op,
    int k0,
    int s0,
    int p0,
  ) {
    return _ggml_pool_1d(
      ctx,
      a,
      op.value,
      k0,
      s0,
      p0,
    );
  }

  late final _ggml_pool_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_pool_1d');
  late final _ggml_pool_1d = _ggml_pool_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_pool_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_op_pool op,
    int k0,
    int k1,
    int s0,
    int s1,
    double p0,
    double p1,
  ) {
    return _ggml_pool_2d(
      ctx,
      a,
      op.value,
      k0,
      k1,
      s0,
      s1,
      p0,
      p1,
    );
  }

  late final _ggml_pool_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float)>>('ggml_pool_2d');
  late final _ggml_pool_2d = _ggml_pool_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, double, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_pool_2d_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> af,
    ggml_op_pool op,
    int k0,
    int k1,
    int s0,
    int s1,
    double p0,
    double p1,
  ) {
    return _ggml_pool_2d_back(
      ctx,
      a,
      af,
      op.value,
      k0,
      k1,
      s0,
      s1,
      p0,
      p1,
    );
  }

  late final _ggml_pool_2d_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float)>>('ggml_pool_2d_back');
  late final _ggml_pool_2d_back = _ggml_pool_2d_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_upscale(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int scale_factor,
  ) {
    return _ggml_upscale(
      ctx,
      a,
      scale_factor,
    );
  }

  late final _ggml_upscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_upscale');
  late final _ggml_upscale = _ggml_upscalePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_upscale_ext(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_upscale_ext(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_upscale_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_upscale_ext');
  late final _ggml_upscale_ext = _ggml_upscale_extPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_pad(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int p0,
    int p1,
    int p2,
    int p3,
  ) {
    return _ggml_pad(
      ctx,
      a,
      p0,
      p1,
      p2,
      p3,
    );
  }

  late final _ggml_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_pad');
  late final _ggml_pad = _ggml_padPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_pad_reflect_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int p0,
    int p1,
  ) {
    return _ggml_pad_reflect_1d(
      ctx,
      a,
      p0,
      p1,
    );
  }

  late final _ggml_pad_reflect_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_pad_reflect_1d');
  late final _ggml_pad_reflect_1d = _ggml_pad_reflect_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_timestep_embedding(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> timesteps,
    int dim,
    int max_period,
  ) {
    return _ggml_timestep_embedding(
      ctx,
      timesteps,
      dim,
      max_period,
    );
  }

  late final _ggml_timestep_embeddingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_timestep_embedding');
  late final _ggml_timestep_embedding = _ggml_timestep_embeddingPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_argsort(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_sort_order order,
  ) {
    return _ggml_argsort(
      ctx,
      a,
      order.value,
    );
  }

  late final _ggml_argsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.UnsignedInt)>>('ggml_argsort');
  late final _ggml_argsort = _ggml_argsortPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_arange(
    ffi.Pointer<ggml_context> ctx,
    double start,
    double stop,
    double step,
  ) {
    return _ggml_arange(
      ctx,
      start,
      stop,
      step,
    );
  }

  late final _ggml_arangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Float, ffi.Float, ffi.Float)>>('ggml_arange');
  late final _ggml_arange = _ggml_arangePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, double, double, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_top_k(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int k,
  ) {
    return _ggml_top_k(
      ctx,
      a,
      k,
    );
  }

  late final _ggml_top_kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_top_k');
  late final _ggml_top_k = _ggml_top_kPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_flash_attn_ext(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> mask,
    double scale,
    double max_bias,
    double logit_softcap,
  ) {
    return _ggml_flash_attn_ext(
      ctx,
      q,
      k,
      v,
      mask,
      scale,
      max_bias,
      logit_softcap,
    );
  }

  late final _ggml_flash_attn_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_flash_attn_ext');
  late final _ggml_flash_attn_ext = _ggml_flash_attn_extPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          double,
          double,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_flash_attn_ext_set_prec(
    ffi.Pointer<ggml_tensor> a,
    ggml_prec prec,
  ) {
    return _ggml_flash_attn_ext_set_prec(
      a,
      prec.value,
    );
  }

  late final _ggml_flash_attn_ext_set_precPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_flash_attn_ext_set_prec');
  late final _ggml_flash_attn_ext_set_prec = _ggml_flash_attn_ext_set_precPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_prec ggml_flash_attn_ext_get_prec(
    ffi.Pointer<ggml_tensor> a,
  ) {
    return ggml_prec.fromValue(_ggml_flash_attn_ext_get_prec(
      a,
    ));
  }

  late final _ggml_flash_attn_ext_get_precPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ggml_tensor>)>>(
      'ggml_flash_attn_ext_get_prec');
  late final _ggml_flash_attn_ext_get_prec = _ggml_flash_attn_ext_get_precPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_flash_attn_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> d,
    bool masked,
  ) {
    return _ggml_flash_attn_back(
      ctx,
      q,
      k,
      v,
      d,
      masked,
    );
  }

  late final _ggml_flash_attn_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Bool)>>('ggml_flash_attn_back');
  late final _ggml_flash_attn_back = _ggml_flash_attn_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          bool)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_ssm_conv(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> sx,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_ssm_conv(
      ctx,
      sx,
      c,
    );
  }

  late final _ggml_ssm_convPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_ssm_conv');
  late final _ggml_ssm_conv = _ggml_ssm_convPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_ssm_scan(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> s,
    ffi.Pointer<ggml_tensor> x,
    ffi.Pointer<ggml_tensor> dt,
    ffi.Pointer<ggml_tensor> A,
    ffi.Pointer<ggml_tensor> B,
    ffi.Pointer<ggml_tensor> C,
  ) {
    return _ggml_ssm_scan(
      ctx,
      s,
      x,
      dt,
      A,
      B,
      C,
    );
  }

  late final _ggml_ssm_scanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_ssm_scan');
  late final _ggml_ssm_scan = _ggml_ssm_scanPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_win_part(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int w,
  ) {
    return _ggml_win_part(
      ctx,
      a,
      w,
    );
  }

  late final _ggml_win_partPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_win_part');
  late final _ggml_win_part = _ggml_win_partPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_win_unpart(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int w0,
    int h0,
    int w,
  ) {
    return _ggml_win_unpart(
      ctx,
      a,
      w0,
      h0,
      w,
    );
  }

  late final _ggml_win_unpartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_win_unpart');
  late final _ggml_win_unpart = _ggml_win_unpartPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_unary(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_unary_op op,
  ) {
    return _ggml_unary(
      ctx,
      a,
      op.value,
    );
  }

  late final _ggml_unaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.UnsignedInt)>>('ggml_unary');
  late final _ggml_unary = _ggml_unaryPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_unary_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_unary_op op,
  ) {
    return _ggml_unary_inplace(
      ctx,
      a,
      op.value,
    );
  }

  late final _ggml_unary_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_unary_inplace');
  late final _ggml_unary_inplace = _ggml_unary_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_get_rel_pos(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int qh,
    int kh,
  ) {
    return _ggml_get_rel_pos(
      ctx,
      a,
      qh,
      kh,
    );
  }

  late final _ggml_get_rel_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int)>>('ggml_get_rel_pos');
  late final _ggml_get_rel_pos = _ggml_get_rel_posPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_add_rel_pos(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> pw,
    ffi.Pointer<ggml_tensor> ph,
  ) {
    return _ggml_add_rel_pos(
      ctx,
      a,
      pw,
      ph,
    );
  }

  late final _ggml_add_rel_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add_rel_pos');
  late final _ggml_add_rel_pos = _ggml_add_rel_posPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_add_rel_pos_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> pw,
    ffi.Pointer<ggml_tensor> ph,
  ) {
    return _ggml_add_rel_pos_inplace(
      ctx,
      a,
      pw,
      ph,
    );
  }

  late final _ggml_add_rel_pos_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add_rel_pos_inplace');
  late final _ggml_add_rel_pos_inplace =
      _ggml_add_rel_pos_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_rwkv_wkv6(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> r,
    ffi.Pointer<ggml_tensor> tf,
    ffi.Pointer<ggml_tensor> td,
    ffi.Pointer<ggml_tensor> state,
  ) {
    return _ggml_rwkv_wkv6(
      ctx,
      k,
      v,
      r,
      tf,
      td,
      state,
    );
  }

  late final _ggml_rwkv_wkv6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_rwkv_wkv6');
  late final _ggml_rwkv_wkv6 = _ggml_rwkv_wkv6Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_gated_linear_attn(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> g,
    ffi.Pointer<ggml_tensor> state,
    double scale,
  ) {
    return _ggml_gated_linear_attn(
      ctx,
      k,
      v,
      q,
      g,
      state,
      scale,
    );
  }

  late final _ggml_gated_linear_attnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float)>>('ggml_gated_linear_attn');
  late final _ggml_gated_linear_attn = _ggml_gated_linear_attnPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_unary_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_unary_op_f32_t fun,
  ) {
    return _ggml_map_unary_f32(
      ctx,
      a,
      fun,
    );
  }

  late final _ggml_map_unary_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_unary_op_f32_t)>>('ggml_map_unary_f32');
  late final _ggml_map_unary_f32 = _ggml_map_unary_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ggml_unary_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_unary_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_unary_op_f32_t fun,
  ) {
    return _ggml_map_unary_inplace_f32(
      ctx,
      a,
      fun,
    );
  }

  late final _ggml_map_unary_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_unary_op_f32_t)>>('ggml_map_unary_inplace_f32');
  late final _ggml_map_unary_inplace_f32 =
      _ggml_map_unary_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ggml_unary_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_binary_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_binary_op_f32_t fun,
  ) {
    return _ggml_map_binary_f32(
      ctx,
      a,
      b,
      fun,
    );
  }

  late final _ggml_map_binary_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_binary_op_f32_t)>>('ggml_map_binary_f32');
  late final _ggml_map_binary_f32 = _ggml_map_binary_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_binary_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_binary_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_binary_op_f32_t fun,
  ) {
    return _ggml_map_binary_inplace_f32(
      ctx,
      a,
      b,
      fun,
    );
  }

  late final _ggml_map_binary_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_binary_op_f32_t)>>('ggml_map_binary_inplace_f32');
  late final _ggml_map_binary_inplace_f32 =
      _ggml_map_binary_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_binary_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom1_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_f32_t fun,
  ) {
    return _ggml_map_custom1_f32(
      ctx,
      a,
      fun,
    );
  }

  late final _ggml_map_custom1_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_f32_t)>>('ggml_map_custom1_f32');
  late final _ggml_map_custom1_f32 = _ggml_map_custom1_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ggml_custom1_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom1_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_f32_t fun,
  ) {
    return _ggml_map_custom1_inplace_f32(
      ctx,
      a,
      fun,
    );
  }

  late final _ggml_map_custom1_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_f32_t)>>('ggml_map_custom1_inplace_f32');
  late final _ggml_map_custom1_inplace_f32 =
      _ggml_map_custom1_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ggml_custom1_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom2_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_f32_t fun,
  ) {
    return _ggml_map_custom2_f32(
      ctx,
      a,
      b,
      fun,
    );
  }

  late final _ggml_map_custom2_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_f32_t)>>('ggml_map_custom2_f32');
  late final _ggml_map_custom2_f32 = _ggml_map_custom2_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom2_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom2_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_f32_t fun,
  ) {
    return _ggml_map_custom2_inplace_f32(
      ctx,
      a,
      b,
      fun,
    );
  }

  late final _ggml_map_custom2_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_f32_t)>>('ggml_map_custom2_inplace_f32');
  late final _ggml_map_custom2_inplace_f32 =
      _ggml_map_custom2_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom3_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_f32_t fun,
  ) {
    return _ggml_map_custom3_f32(
      ctx,
      a,
      b,
      c,
      fun,
    );
  }

  late final _ggml_map_custom3_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_f32_t)>>('ggml_map_custom3_f32');
  late final _ggml_map_custom3_f32 = _ggml_map_custom3_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom3_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom3_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_f32_t fun,
  ) {
    return _ggml_map_custom3_inplace_f32(
      ctx,
      a,
      b,
      c,
      fun,
    );
  }

  late final _ggml_map_custom3_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_f32_t)>>('ggml_map_custom3_inplace_f32');
  late final _ggml_map_custom3_inplace_f32 =
      _ggml_map_custom3_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_f32_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom1(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom1(
      ctx,
      a,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom1');
  late final _ggml_map_custom1 = _ggml_map_custom1Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom1_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom1_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom1_inplace(
      ctx,
      a,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom1_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom1_inplace');
  late final _ggml_map_custom1_inplace =
      _ggml_map_custom1_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom2(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom2(
      ctx,
      a,
      b,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom2');
  late final _ggml_map_custom2 = _ggml_map_custom2Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom2_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom2_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom2_inplace(
      ctx,
      a,
      b,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom2_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom2_inplace');
  late final _ggml_map_custom2_inplace =
      _ggml_map_custom2_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom3(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom3(
      ctx,
      a,
      b,
      c,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom3');
  late final _ggml_map_custom3 = _ggml_map_custom3Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom3_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_map_custom3_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom3_inplace(
      ctx,
      a,
      b,
      c,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom3_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom3_inplace');
  late final _ggml_map_custom3_inplace =
      _ggml_map_custom3_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cross_entropy_loss(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_cross_entropy_loss(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_cross_entropy_lossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cross_entropy_loss');
  late final _ggml_cross_entropy_loss = _ggml_cross_entropy_lossPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_cross_entropy_loss_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_cross_entropy_loss_back(
      ctx,
      a,
      b,
      c,
    );
  }

  late final _ggml_cross_entropy_loss_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cross_entropy_loss_back');
  late final _ggml_cross_entropy_loss_back =
      _ggml_cross_entropy_loss_backPtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_opt_step_adamw(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> grad,
    ffi.Pointer<ggml_tensor> m,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> adamw_params,
  ) {
    return _ggml_opt_step_adamw(
      ctx,
      a,
      grad,
      m,
      v,
      adamw_params,
    );
  }

  late final _ggml_opt_step_adamwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_opt_step_adamw');
  late final _ggml_opt_step_adamw = _ggml_opt_step_adamwPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_build_forward_expand(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_build_forward_expand(
      cgraph,
      tensor,
    );
  }

  late final _ggml_build_forward_expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_build_forward_expand');
  late final _ggml_build_forward_expand =
      _ggml_build_forward_expandPtr.asFunction<
          void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_build_backward_expand(
    ffi.Pointer<ggml_context> ctx_static,
    ffi.Pointer<ggml_context> ctx_compute,
    ffi.Pointer<ggml_cgraph> cgraph,
    bool accumulate,
  ) {
    return _ggml_build_backward_expand(
      ctx_static,
      ctx_compute,
      cgraph,
      accumulate,
    );
  }

  late final _ggml_build_backward_expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>,
              ffi.Bool)>>('ggml_build_backward_expand');
  late final _ggml_build_backward_expand =
      _ggml_build_backward_expandPtr.asFunction<
          void Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>, bool)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_cgraph> ggml_new_graph(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_new_graph(
      ctx,
    );
  }

  late final _ggml_new_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(
              ffi.Pointer<ggml_context>)>>('ggml_new_graph');
  late final _ggml_new_graph = _ggml_new_graphPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(ffi.Pointer<ggml_context>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_cgraph> ggml_new_graph_custom(
    ffi.Pointer<ggml_context> ctx,
    int size,
    bool grads,
  ) {
    return _ggml_new_graph_custom(
      ctx,
      size,
      grads,
    );
  }

  late final _ggml_new_graph_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(ffi.Pointer<ggml_context>, ffi.Size,
              ffi.Bool)>>('ggml_new_graph_custom');
  late final _ggml_new_graph_custom = _ggml_new_graph_customPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(
          ffi.Pointer<ggml_context>, int, bool)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_cgraph> ggml_graph_dup(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_dup(
      ctx,
      cgraph,
    );
  }

  late final _ggml_graph_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>)>>('ggml_graph_dup');
  late final _ggml_graph_dup = _ggml_graph_dupPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_graph_cpy(
    ffi.Pointer<ggml_cgraph> src,
    ffi.Pointer<ggml_cgraph> dst,
  ) {
    return _ggml_graph_cpy(
      src,
      dst,
    );
  }

  late final _ggml_graph_cpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_cgraph>)>>('ggml_graph_cpy');
  late final _ggml_graph_cpy = _ggml_graph_cpyPtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_graph_reset(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_reset(
      cgraph,
    );
  }

  late final _ggml_graph_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_reset');
  late final _ggml_graph_reset = _ggml_graph_resetPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_graph_clear(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_clear(
      cgraph,
    );
  }

  late final _ggml_graph_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_clear');
  late final _ggml_graph_clear = _ggml_graph_clearPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_graph_size(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_size(
      cgraph,
    );
  }

  late final _ggml_graph_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_size');
  late final _ggml_graph_size =
      _ggml_graph_sizePtr.asFunction<int Function(ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_graph_node(
    ffi.Pointer<ggml_cgraph> cgraph,
    int i,
  ) {
    return _ggml_graph_node(
      cgraph,
      i,
    );
  }

  late final _ggml_graph_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_cgraph>, ffi.Int)>>('ggml_graph_node');
  late final _ggml_graph_node = _ggml_graph_nodePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Pointer<ggml_tensor>> ggml_graph_nodes(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_nodes(
      cgraph,
    );
  }

  late final _ggml_graph_nodesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ggml_tensor>> Function(
              ffi.Pointer<ggml_cgraph>)>>('ggml_graph_nodes');
  late final _ggml_graph_nodes = _ggml_graph_nodesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ggml_tensor>> Function(
          ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_graph_n_nodes(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_n_nodes(
      cgraph,
    );
  }

  late final _ggml_graph_n_nodesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_n_nodes');
  late final _ggml_graph_n_nodes = _ggml_graph_n_nodesPtr
      .asFunction<int Function(ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_graph_add_node(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_graph_add_node(
      cgraph,
      tensor,
    );
  }

  late final _ggml_graph_add_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_graph_add_node');
  late final _ggml_graph_add_node = _ggml_graph_add_nodePtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_graph_overhead() {
    return _ggml_graph_overhead();
  }

  late final _ggml_graph_overheadPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ggml_graph_overhead');
  late final _ggml_graph_overhead =
      _ggml_graph_overheadPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_graph_overhead_custom(
    int size,
    bool grads,
  ) {
    return _ggml_graph_overhead_custom(
      size,
      grads,
    );
  }

  late final _ggml_graph_overhead_customPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Size, ffi.Bool)>>(
          'ggml_graph_overhead_custom');
  late final _ggml_graph_overhead_custom =
      _ggml_graph_overhead_customPtr.asFunction<int Function(int, bool)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_graph_get_tensor(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_graph_get_tensor(
      cgraph,
      name,
    );
  }

  late final _ggml_graph_get_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_get_tensor');
  late final _ggml_graph_get_tensor = _ggml_graph_get_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_cgraph>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_graph_get_grad(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> node,
  ) {
    return _ggml_graph_get_grad(
      cgraph,
      node,
    );
  }

  late final _ggml_graph_get_gradPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_graph_get_grad');
  late final _ggml_graph_get_grad = _ggml_graph_get_gradPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_graph_get_grad_acc(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> node,
  ) {
    return _ggml_graph_get_grad_acc(
      cgraph,
      node,
    );
  }

  late final _ggml_graph_get_grad_accPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_graph_get_grad_acc');
  late final _ggml_graph_get_grad_acc = _ggml_graph_get_grad_accPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_graph_export(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ffi.Char> fname,
  ) {
    return _ggml_graph_export(
      cgraph,
      fname,
    );
  }

  late final _ggml_graph_exportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_export');
  late final _ggml_graph_export = _ggml_graph_exportPtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_cgraph> ggml_graph_import(
    ffi.Pointer<ffi.Char> fname,
    ffi.Pointer<ffi.Pointer<ggml_context>> ctx_data,
    ffi.Pointer<ffi.Pointer<ggml_context>> ctx_eval,
  ) {
    return _ggml_graph_import(
      fname,
      ctx_data,
      ctx_eval,
    );
  }

  late final _ggml_graph_importPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ggml_context>>,
              ffi.Pointer<ffi.Pointer<ggml_context>>)>>('ggml_graph_import');
  late final _ggml_graph_import = _ggml_graph_importPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ggml_context>>,
          ffi.Pointer<ffi.Pointer<ggml_context>>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_graph_print(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_print(
      cgraph,
    );
  }

  late final _ggml_graph_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_print');
  late final _ggml_graph_print = _ggml_graph_printPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_graph_dump_dot(
    ffi.Pointer<ggml_cgraph> gb,
    ffi.Pointer<ggml_cgraph> gf,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _ggml_graph_dump_dot(
      gb,
      gf,
      filename,
    );
  }

  late final _ggml_graph_dump_dotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_dump_dot');
  late final _ggml_graph_dump_dot = _ggml_graph_dump_dotPtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>,
          ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_log_set(
    ggml_log_callback log_callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _ggml_log_set(
      log_callback,
      user_data,
    );
  }

  late final _ggml_log_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_log_callback, ffi.Pointer<ffi.Void>)>>('ggml_log_set');
  late final _ggml_log_set = _ggml_log_setPtr
      .asFunction<void Function(ggml_log_callback, ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_zero(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_zero(
      tensor,
    );
  }

  late final _ggml_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_set_zero');
  late final _ggml_set_zero = _ggml_set_zeroPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_quantize_init(
    ggml_type type,
  ) {
    return _ggml_quantize_init(
      type.value,
    );
  }

  late final _ggml_quantize_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'ggml_quantize_init');
  late final _ggml_quantize_init =
      _ggml_quantize_initPtr.asFunction<void Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_quantize_free() {
    return _ggml_quantize_free();
  }

  late final _ggml_quantize_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_quantize_free');
  late final _ggml_quantize_free =
      _ggml_quantize_freePtr.asFunction<void Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_quantize_requires_imatrix(
    ggml_type type,
  ) {
    return _ggml_quantize_requires_imatrix(
      type.value,
    );
  }

  late final _ggml_quantize_requires_imatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'ggml_quantize_requires_imatrix');
  late final _ggml_quantize_requires_imatrix =
      _ggml_quantize_requires_imatrixPtr.asFunction<bool Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_quantize_chunk(
    ggml_type type,
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Void> dst,
    int start,
    int nrows,
    int n_per_row,
    ffi.Pointer<ffi.Float> imatrix,
  ) {
    return _ggml_quantize_chunk(
      type.value,
      src,
      dst,
      start,
      nrows,
      n_per_row,
      imatrix,
    );
  }

  late final _ggml_quantize_chunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Void>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Pointer<ffi.Float>)>>('ggml_quantize_chunk');
  late final _ggml_quantize_chunk = _ggml_quantize_chunkPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>, int, int,
          int, ffi.Pointer<ffi.Float>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_type_traits> ggml_get_type_traits(
    ggml_type type,
  ) {
    return _ggml_get_type_traits(
      type.value,
    );
  }

  late final _ggml_get_type_traitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_type_traits> Function(
              ffi.UnsignedInt)>>('ggml_get_type_traits');
  late final _ggml_get_type_traits = _ggml_get_type_traitsPtr
      .asFunction<ffi.Pointer<ggml_type_traits> Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_threadpool_params ggml_threadpool_params_default(
    int n_threads,
  ) {
    return _ggml_threadpool_params_default(
      n_threads,
    );
  }

  late final _ggml_threadpool_params_defaultPtr =
      _lookup<ffi.NativeFunction<ggml_threadpool_params Function(ffi.Int)>>(
          'ggml_threadpool_params_default');
  late final _ggml_threadpool_params_default =
      _ggml_threadpool_params_defaultPtr
          .asFunction<ggml_threadpool_params Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_threadpool_params_init(
    ffi.Pointer<ggml_threadpool_params> p,
    int n_threads,
  ) {
    return _ggml_threadpool_params_init(
      p,
      n_threads,
    );
  }

  late final _ggml_threadpool_params_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_threadpool_params>,
              ffi.Int)>>('ggml_threadpool_params_init');
  late final _ggml_threadpool_params_init = _ggml_threadpool_params_initPtr
      .asFunction<void Function(ffi.Pointer<ggml_threadpool_params>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_threadpool_params_match(
    ffi.Pointer<ggml_threadpool_params> p0,
    ffi.Pointer<ggml_threadpool_params> p1,
  ) {
    return _ggml_threadpool_params_match(
      p0,
      p1,
    );
  }

  late final _ggml_threadpool_params_matchPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ggml_threadpool_params>,
                  ffi.Pointer<ggml_threadpool_params>)>>(
      'ggml_threadpool_params_match');
  late final _ggml_threadpool_params_match =
      _ggml_threadpool_params_matchPtr.asFunction<
          bool Function(ffi.Pointer<ggml_threadpool_params>,
              ffi.Pointer<ggml_threadpool_params>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_tallocr ggml_tallocr_new(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_tallocr_new(
      buffer,
    );
  }

  late final _ggml_tallocr_newPtr =
      _lookup<ffi.NativeFunction<ggml_tallocr Function(ggml_backend_buffer_t)>>(
          'ggml_tallocr_new');
  late final _ggml_tallocr_new = _ggml_tallocr_newPtr
      .asFunction<ggml_tallocr Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_tallocr_alloc(
    ffi.Pointer<ggml_tallocr> talloc,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_tallocr_alloc(
      talloc,
      tensor,
    );
  }

  late final _ggml_tallocr_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tallocr>,
              ffi.Pointer<ggml_tensor>)>>('ggml_tallocr_alloc');
  late final _ggml_tallocr_alloc = _ggml_tallocr_allocPtr.asFunction<
      void Function(ffi.Pointer<ggml_tallocr>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_gallocr_t ggml_gallocr_new(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_gallocr_new(
      buft,
    );
  }

  late final _ggml_gallocr_newPtr = _lookup<
          ffi
          .NativeFunction<ggml_gallocr_t Function(ggml_backend_buffer_type_t)>>(
      'ggml_gallocr_new');
  late final _ggml_gallocr_new = _ggml_gallocr_newPtr
      .asFunction<ggml_gallocr_t Function(ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_gallocr_t ggml_gallocr_new_n(
    ffi.Pointer<ggml_backend_buffer_type_t> bufts,
    int n_bufs,
  ) {
    return _ggml_gallocr_new_n(
      bufts,
      n_bufs,
    );
  }

  late final _ggml_gallocr_new_nPtr = _lookup<
      ffi.NativeFunction<
          ggml_gallocr_t Function(ffi.Pointer<ggml_backend_buffer_type_t>,
              ffi.Int)>>('ggml_gallocr_new_n');
  late final _ggml_gallocr_new_n = _ggml_gallocr_new_nPtr.asFunction<
      ggml_gallocr_t Function(ffi.Pointer<ggml_backend_buffer_type_t>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_gallocr_free(
    ggml_gallocr_t galloc,
  ) {
    return _ggml_gallocr_free(
      galloc,
    );
  }

  late final _ggml_gallocr_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_gallocr_t)>>(
          'ggml_gallocr_free');
  late final _ggml_gallocr_free =
      _ggml_gallocr_freePtr.asFunction<void Function(ggml_gallocr_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_gallocr_reserve(
    ggml_gallocr_t galloc,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return _ggml_gallocr_reserve(
      galloc,
      graph,
    );
  }

  late final _ggml_gallocr_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_gallocr_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_gallocr_reserve');
  late final _ggml_gallocr_reserve = _ggml_gallocr_reservePtr
      .asFunction<bool Function(ggml_gallocr_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_gallocr_reserve_n(
    ggml_gallocr_t galloc,
    ffi.Pointer<ggml_cgraph> graph,
    ffi.Pointer<ffi.Int> node_buffer_ids,
    ffi.Pointer<ffi.Int> leaf_buffer_ids,
  ) {
    return _ggml_gallocr_reserve_n(
      galloc,
      graph,
      node_buffer_ids,
      leaf_buffer_ids,
    );
  }

  late final _ggml_gallocr_reserve_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ggml_gallocr_t,
              ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ggml_gallocr_reserve_n');
  late final _ggml_gallocr_reserve_n = _ggml_gallocr_reserve_nPtr.asFunction<
      bool Function(ggml_gallocr_t, ffi.Pointer<ggml_cgraph>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_gallocr_alloc_graph(
    ggml_gallocr_t galloc,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return _ggml_gallocr_alloc_graph(
      galloc,
      graph,
    );
  }

  late final _ggml_gallocr_alloc_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_gallocr_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_gallocr_alloc_graph');
  late final _ggml_gallocr_alloc_graph = _ggml_gallocr_alloc_graphPtr
      .asFunction<bool Function(ggml_gallocr_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_gallocr_get_buffer_size(
    ggml_gallocr_t galloc,
    int buffer_id,
  ) {
    return _ggml_gallocr_get_buffer_size(
      galloc,
      buffer_id,
    );
  }

  late final _ggml_gallocr_get_buffer_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_gallocr_t, ffi.Int)>>(
          'ggml_gallocr_get_buffer_size');
  late final _ggml_gallocr_get_buffer_size = _ggml_gallocr_get_buffer_sizePtr
      .asFunction<int Function(ggml_gallocr_t, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_backend_buffer> ggml_backend_alloc_ctx_tensors_from_buft(
    ffi.Pointer<ggml_context> ctx,
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_alloc_ctx_tensors_from_buft(
      ctx,
      buft,
    );
  }

  late final _ggml_backend_alloc_ctx_tensors_from_buftPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ggml_backend_buffer> Function(
                  ffi.Pointer<ggml_context>, ggml_backend_buffer_type_t)>>(
      'ggml_backend_alloc_ctx_tensors_from_buft');
  late final _ggml_backend_alloc_ctx_tensors_from_buft =
      _ggml_backend_alloc_ctx_tensors_from_buftPtr.asFunction<
          ffi.Pointer<ggml_backend_buffer> Function(
              ffi.Pointer<ggml_context>, ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_backend_buffer> ggml_backend_alloc_ctx_tensors(
    ffi.Pointer<ggml_context> ctx,
    ggml_backend_t backend,
  ) {
    return _ggml_backend_alloc_ctx_tensors(
      ctx,
      backend,
    );
  }

  late final _ggml_backend_alloc_ctx_tensorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_backend_buffer> Function(ffi.Pointer<ggml_context>,
              ggml_backend_t)>>('ggml_backend_alloc_ctx_tensors');
  late final _ggml_backend_alloc_ctx_tensors =
      _ggml_backend_alloc_ctx_tensorsPtr.asFunction<
          ffi.Pointer<ggml_backend_buffer> Function(
              ffi.Pointer<ggml_context>, ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_backend_buft_name(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_name(
      buft,
    );
  }

  late final _ggml_backend_buft_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ggml_backend_buffer_type_t)>>('ggml_backend_buft_name');
  late final _ggml_backend_buft_name = _ggml_backend_buft_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_t ggml_backend_buft_alloc_buffer(
    ggml_backend_buffer_type_t buft,
    int size,
  ) {
    return _ggml_backend_buft_alloc_buffer(
      buft,
      size,
    );
  }

  late final _ggml_backend_buft_alloc_bufferPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_t Function(ggml_backend_buffer_type_t,
              ffi.Size)>>('ggml_backend_buft_alloc_buffer');
  late final _ggml_backend_buft_alloc_buffer =
      _ggml_backend_buft_alloc_bufferPtr.asFunction<
          ggml_backend_buffer_t Function(ggml_backend_buffer_type_t, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_buft_get_alignment(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_get_alignment(
      buft,
    );
  }

  late final _ggml_backend_buft_get_alignmentPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_type_t)>>(
      'ggml_backend_buft_get_alignment');
  late final _ggml_backend_buft_get_alignment =
      _ggml_backend_buft_get_alignmentPtr
          .asFunction<int Function(ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_buft_get_max_size(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_get_max_size(
      buft,
    );
  }

  late final _ggml_backend_buft_get_max_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_type_t)>>(
      'ggml_backend_buft_get_max_size');
  late final _ggml_backend_buft_get_max_size =
      _ggml_backend_buft_get_max_sizePtr
          .asFunction<int Function(ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_buft_get_alloc_size(
    ggml_backend_buffer_type_t buft,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_backend_buft_get_alloc_size(
      buft,
      tensor,
    );
  }

  late final _ggml_backend_buft_get_alloc_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ggml_backend_buffer_type_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_buft_get_alloc_size');
  late final _ggml_backend_buft_get_alloc_size =
      _ggml_backend_buft_get_alloc_sizePtr.asFunction<
          int Function(ggml_backend_buffer_type_t, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_buft_is_host(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_is_host(
      buft,
    );
  }

  late final _ggml_backend_buft_is_hostPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ggml_backend_buffer_type_t)>>(
      'ggml_backend_buft_is_host');
  late final _ggml_backend_buft_is_host = _ggml_backend_buft_is_hostPtr
      .asFunction<bool Function(ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_dev_t ggml_backend_buft_get_device(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_get_device(
      buft,
    );
  }

  late final _ggml_backend_buft_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_dev_t Function(
              ggml_backend_buffer_type_t)>>('ggml_backend_buft_get_device');
  late final _ggml_backend_buft_get_device = _ggml_backend_buft_get_devicePtr
      .asFunction<ggml_backend_dev_t Function(ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_backend_buffer_name(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_name(
      buffer,
    );
  }

  late final _ggml_backend_buffer_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ggml_backend_buffer_t)>>('ggml_backend_buffer_name');
  late final _ggml_backend_buffer_name = _ggml_backend_buffer_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_buffer_free(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_free(
      buffer,
    );
  }

  late final _ggml_backend_buffer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_free');
  late final _ggml_backend_buffer_free = _ggml_backend_buffer_freePtr
      .asFunction<void Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Void> ggml_backend_buffer_get_base(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_base(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ggml_backend_buffer_t)>>('ggml_backend_buffer_get_base');
  late final _ggml_backend_buffer_get_base = _ggml_backend_buffer_get_basePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_buffer_get_size(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_size(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_get_size');
  late final _ggml_backend_buffer_get_size = _ggml_backend_buffer_get_sizePtr
      .asFunction<int Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_buffer_init_tensor(
    ggml_backend_buffer_t buffer,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_backend_buffer_init_tensor(
      buffer,
      tensor,
    );
  }

  late final _ggml_backend_buffer_init_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_buffer_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_buffer_init_tensor');
  late final _ggml_backend_buffer_init_tensor =
      _ggml_backend_buffer_init_tensorPtr.asFunction<
          void Function(ggml_backend_buffer_t, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_buffer_get_alignment(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_alignment(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_alignmentPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_get_alignment');
  late final _ggml_backend_buffer_get_alignment =
      _ggml_backend_buffer_get_alignmentPtr
          .asFunction<int Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_buffer_get_max_size(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_max_size(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_max_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_get_max_size');
  late final _ggml_backend_buffer_get_max_size =
      _ggml_backend_buffer_get_max_sizePtr
          .asFunction<int Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_buffer_get_alloc_size(
    ggml_backend_buffer_t buffer,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_backend_buffer_get_alloc_size(
      buffer,
      tensor,
    );
  }

  late final _ggml_backend_buffer_get_alloc_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ggml_backend_buffer_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_buffer_get_alloc_size');
  late final _ggml_backend_buffer_get_alloc_size =
      _ggml_backend_buffer_get_alloc_sizePtr.asFunction<
          int Function(ggml_backend_buffer_t, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_buffer_clear(
    ggml_backend_buffer_t buffer,
    int value,
  ) {
    return _ggml_backend_buffer_clear(
      buffer,
      value,
    );
  }

  late final _ggml_backend_buffer_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ggml_backend_buffer_t, ffi.Uint8)>>(
      'ggml_backend_buffer_clear');
  late final _ggml_backend_buffer_clear = _ggml_backend_buffer_clearPtr
      .asFunction<void Function(ggml_backend_buffer_t, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_buffer_is_host(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_is_host(
      buffer,
    );
  }

  late final _ggml_backend_buffer_is_hostPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_is_host');
  late final _ggml_backend_buffer_is_host = _ggml_backend_buffer_is_hostPtr
      .asFunction<bool Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_buffer_set_usage(
    ggml_backend_buffer_t buffer,
    ggml_backend_buffer_usage usage,
  ) {
    return _ggml_backend_buffer_set_usage(
      buffer,
      usage.value,
    );
  }

  late final _ggml_backend_buffer_set_usagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_buffer_t,
              ffi.UnsignedInt)>>('ggml_backend_buffer_set_usage');
  late final _ggml_backend_buffer_set_usage = _ggml_backend_buffer_set_usagePtr
      .asFunction<void Function(ggml_backend_buffer_t, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_usage ggml_backend_buffer_get_usage(
    ggml_backend_buffer_t buffer,
  ) {
    return ggml_backend_buffer_usage.fromValue(_ggml_backend_buffer_get_usage(
      buffer,
    ));
  }

  late final _ggml_backend_buffer_get_usagePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ggml_backend_buffer_t)>>(
      'ggml_backend_buffer_get_usage');
  late final _ggml_backend_buffer_get_usage = _ggml_backend_buffer_get_usagePtr
      .asFunction<int Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_type_t ggml_backend_buffer_get_type(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_type(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_typePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_type_t Function(
              ggml_backend_buffer_t)>>('ggml_backend_buffer_get_type');
  late final _ggml_backend_buffer_get_type = _ggml_backend_buffer_get_typePtr
      .asFunction<ggml_backend_buffer_type_t Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_buffer_reset(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_reset(
      buffer,
    );
  }

  late final _ggml_backend_buffer_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_reset');
  late final _ggml_backend_buffer_reset = _ggml_backend_buffer_resetPtr
      .asFunction<void Function(ggml_backend_buffer_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_tensor_copy(
    ffi.Pointer<ggml_tensor> src,
    ffi.Pointer<ggml_tensor> dst,
  ) {
    return _ggml_backend_tensor_copy(
      src,
      dst,
    );
  }

  late final _ggml_backend_tensor_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_tensor_copy');
  late final _ggml_backend_tensor_copy =
      _ggml_backend_tensor_copyPtr.asFunction<
          void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_guid_t ggml_backend_guid(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_guid(
      backend,
    );
  }

  late final _ggml_backend_guidPtr =
      _lookup<ffi.NativeFunction<ggml_guid_t Function(ggml_backend_t)>>(
          'ggml_backend_guid');
  late final _ggml_backend_guid =
      _ggml_backend_guidPtr.asFunction<ggml_guid_t Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_backend_name(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_name(
      backend,
    );
  }

  late final _ggml_backend_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_t)>>(
      'ggml_backend_name');
  late final _ggml_backend_name = _ggml_backend_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_free(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_free(
      backend,
    );
  }

  late final _ggml_backend_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_t)>>(
          'ggml_backend_free');
  late final _ggml_backend_free =
      _ggml_backend_freePtr.asFunction<void Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_type_t ggml_backend_get_default_buffer_type(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_get_default_buffer_type(
      backend,
    );
  }

  late final _ggml_backend_get_default_buffer_typePtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_buffer_type_t Function(ggml_backend_t)>>(
      'ggml_backend_get_default_buffer_type');
  late final _ggml_backend_get_default_buffer_type =
      _ggml_backend_get_default_buffer_typePtr
          .asFunction<ggml_backend_buffer_type_t Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_t ggml_backend_alloc_buffer(
    ggml_backend_t backend,
    int size,
  ) {
    return _ggml_backend_alloc_buffer(
      backend,
      size,
    );
  }

  late final _ggml_backend_alloc_bufferPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_t Function(
              ggml_backend_t, ffi.Size)>>('ggml_backend_alloc_buffer');
  late final _ggml_backend_alloc_buffer = _ggml_backend_alloc_bufferPtr
      .asFunction<ggml_backend_buffer_t Function(ggml_backend_t, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_get_alignment(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_get_alignment(
      backend,
    );
  }

  late final _ggml_backend_get_alignmentPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_t)>>(
          'ggml_backend_get_alignment');
  late final _ggml_backend_get_alignment =
      _ggml_backend_get_alignmentPtr.asFunction<int Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_get_max_size(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_get_max_size(
      backend,
    );
  }

  late final _ggml_backend_get_max_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_t)>>(
          'ggml_backend_get_max_size');
  late final _ggml_backend_get_max_size =
      _ggml_backend_get_max_sizePtr.asFunction<int Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_tensor_set_async(
    ggml_backend_t backend,
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> data,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_set_async(
      backend,
      tensor,
      data,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_set_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_t,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size)>>('ggml_backend_tensor_set_async');
  late final _ggml_backend_tensor_set_async =
      _ggml_backend_tensor_set_asyncPtr.asFunction<
          void Function(ggml_backend_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_tensor_get_async(
    ggml_backend_t backend,
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> data,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_get_async(
      backend,
      tensor,
      data,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_get_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_t,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size)>>('ggml_backend_tensor_get_async');
  late final _ggml_backend_tensor_get_async =
      _ggml_backend_tensor_get_asyncPtr.asFunction<
          void Function(ggml_backend_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_tensor_set(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> data,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_set(
      tensor,
      data,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Size)>>('ggml_backend_tensor_set');
  late final _ggml_backend_tensor_set = _ggml_backend_tensor_setPtr.asFunction<
      void Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_tensor_get(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> data,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_get(
      tensor,
      data,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Size)>>('ggml_backend_tensor_get');
  late final _ggml_backend_tensor_get = _ggml_backend_tensor_getPtr.asFunction<
      void Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_tensor_memset(
    ffi.Pointer<ggml_tensor> tensor,
    int value,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_memset(
      tensor,
      value,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Uint8, ffi.Size,
              ffi.Size)>>('ggml_backend_tensor_memset');
  late final _ggml_backend_tensor_memset = _ggml_backend_tensor_memsetPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_synchronize(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_synchronize(
      backend,
    );
  }

  late final _ggml_backend_synchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_t)>>(
          'ggml_backend_synchronize');
  late final _ggml_backend_synchronize =
      _ggml_backend_synchronizePtr.asFunction<void Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_graph_plan_t ggml_backend_graph_plan_create(
    ggml_backend_t backend,
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_backend_graph_plan_create(
      backend,
      cgraph,
    );
  }

  late final _ggml_backend_graph_plan_createPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_graph_plan_t Function(ggml_backend_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_graph_plan_create');
  late final _ggml_backend_graph_plan_create =
      _ggml_backend_graph_plan_createPtr.asFunction<
          ggml_backend_graph_plan_t Function(
              ggml_backend_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_graph_plan_free(
    ggml_backend_t backend,
    ggml_backend_graph_plan_t plan,
  ) {
    return _ggml_backend_graph_plan_free(
      backend,
      plan,
    );
  }

  late final _ggml_backend_graph_plan_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_t,
              ggml_backend_graph_plan_t)>>('ggml_backend_graph_plan_free');
  late final _ggml_backend_graph_plan_free = _ggml_backend_graph_plan_freePtr
      .asFunction<void Function(ggml_backend_t, ggml_backend_graph_plan_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_status ggml_backend_graph_plan_compute(
    ggml_backend_t backend,
    ggml_backend_graph_plan_t plan,
  ) {
    return ggml_status.fromValue(_ggml_backend_graph_plan_compute(
      backend,
      plan,
    ));
  }

  late final _ggml_backend_graph_plan_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_t,
              ggml_backend_graph_plan_t)>>('ggml_backend_graph_plan_compute');
  late final _ggml_backend_graph_plan_compute =
      _ggml_backend_graph_plan_computePtr.asFunction<
          int Function(ggml_backend_t, ggml_backend_graph_plan_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_status ggml_backend_graph_compute(
    ggml_backend_t backend,
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return ggml_status.fromValue(_ggml_backend_graph_compute(
      backend,
      cgraph,
    ));
  }

  late final _ggml_backend_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_graph_compute');
  late final _ggml_backend_graph_compute = _ggml_backend_graph_computePtr
      .asFunction<int Function(ggml_backend_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_status ggml_backend_graph_compute_async(
    ggml_backend_t backend,
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return ggml_status.fromValue(_ggml_backend_graph_compute_async(
      backend,
      cgraph,
    ));
  }

  late final _ggml_backend_graph_compute_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_graph_compute_async');
  late final _ggml_backend_graph_compute_async =
      _ggml_backend_graph_compute_asyncPtr
          .asFunction<int Function(ggml_backend_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_supports_op(
    ggml_backend_t backend,
    ffi.Pointer<ggml_tensor> op,
  ) {
    return _ggml_backend_supports_op(
      backend,
      op,
    );
  }

  late final _ggml_backend_supports_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_supports_op');
  late final _ggml_backend_supports_op = _ggml_backend_supports_opPtr
      .asFunction<bool Function(ggml_backend_t, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_supports_buft(
    ggml_backend_t backend,
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_supports_buft(
      backend,
      buft,
    );
  }

  late final _ggml_backend_supports_buftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_t,
              ggml_backend_buffer_type_t)>>('ggml_backend_supports_buft');
  late final _ggml_backend_supports_buft = _ggml_backend_supports_buftPtr
      .asFunction<bool Function(ggml_backend_t, ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_offload_op(
    ggml_backend_t backend,
    ffi.Pointer<ggml_tensor> op,
  ) {
    return _ggml_backend_offload_op(
      backend,
      op,
    );
  }

  late final _ggml_backend_offload_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_offload_op');
  late final _ggml_backend_offload_op = _ggml_backend_offload_opPtr
      .asFunction<bool Function(ggml_backend_t, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_tensor_copy_async(
    ggml_backend_t backend_src,
    ggml_backend_t backend_dst,
    ffi.Pointer<ggml_tensor> src,
    ffi.Pointer<ggml_tensor> dst,
  ) {
    return _ggml_backend_tensor_copy_async(
      backend_src,
      backend_dst,
      src,
      dst,
    );
  }

  late final _ggml_backend_tensor_copy_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_t,
              ggml_backend_t,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_tensor_copy_async');
  late final _ggml_backend_tensor_copy_async =
      _ggml_backend_tensor_copy_asyncPtr.asFunction<
          void Function(ggml_backend_t, ggml_backend_t,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_dev_t ggml_backend_get_device(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_get_device(
      backend,
    );
  }

  late final _ggml_backend_get_devicePtr =
      _lookup<ffi.NativeFunction<ggml_backend_dev_t Function(ggml_backend_t)>>(
          'ggml_backend_get_device');
  late final _ggml_backend_get_device = _ggml_backend_get_devicePtr
      .asFunction<ggml_backend_dev_t Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_event_t ggml_backend_event_new(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_event_new(
      device,
    );
  }

  late final _ggml_backend_event_newPtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_event_t Function(ggml_backend_dev_t)>>(
      'ggml_backend_event_new');
  late final _ggml_backend_event_new = _ggml_backend_event_newPtr
      .asFunction<ggml_backend_event_t Function(ggml_backend_dev_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_event_free(
    ggml_backend_event_t event,
  ) {
    return _ggml_backend_event_free(
      event,
    );
  }

  late final _ggml_backend_event_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_event_t)>>(
          'ggml_backend_event_free');
  late final _ggml_backend_event_free = _ggml_backend_event_freePtr
      .asFunction<void Function(ggml_backend_event_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_event_record(
    ggml_backend_event_t event,
    ggml_backend_t backend,
  ) {
    return _ggml_backend_event_record(
      event,
      backend,
    );
  }

  late final _ggml_backend_event_recordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_event_t,
              ggml_backend_t)>>('ggml_backend_event_record');
  late final _ggml_backend_event_record = _ggml_backend_event_recordPtr
      .asFunction<void Function(ggml_backend_event_t, ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_event_synchronize(
    ggml_backend_event_t event,
  ) {
    return _ggml_backend_event_synchronize(
      event,
    );
  }

  late final _ggml_backend_event_synchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_event_t)>>(
          'ggml_backend_event_synchronize');
  late final _ggml_backend_event_synchronize =
      _ggml_backend_event_synchronizePtr
          .asFunction<void Function(ggml_backend_event_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_event_wait(
    ggml_backend_t backend,
    ggml_backend_event_t event,
  ) {
    return _ggml_backend_event_wait(
      backend,
      event,
    );
  }

  late final _ggml_backend_event_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_t,
              ggml_backend_event_t)>>('ggml_backend_event_wait');
  late final _ggml_backend_event_wait = _ggml_backend_event_waitPtr
      .asFunction<void Function(ggml_backend_t, ggml_backend_event_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_backend_dev_name(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_name(
      device,
    );
  }

  late final _ggml_backend_dev_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_dev_t)>>(
      'ggml_backend_dev_name');
  late final _ggml_backend_dev_name = _ggml_backend_dev_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_dev_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_backend_dev_description(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_description(
      device,
    );
  }

  late final _ggml_backend_dev_descriptionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_dev_t)>>(
      'ggml_backend_dev_description');
  late final _ggml_backend_dev_description = _ggml_backend_dev_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_dev_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_dev_memory(
    ggml_backend_dev_t device,
    ffi.Pointer<ffi.Size> free,
    ffi.Pointer<ffi.Size> total,
  ) {
    return _ggml_backend_dev_memory(
      device,
      free,
      total,
    );
  }

  late final _ggml_backend_dev_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_dev_t, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('ggml_backend_dev_memory');
  late final _ggml_backend_dev_memory = _ggml_backend_dev_memoryPtr.asFunction<
      void Function(
          ggml_backend_dev_t, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Size>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_dev_type ggml_backend_dev_type1(
    ggml_backend_dev_t device,
  ) {
    return ggml_backend_dev_type.fromValue(_ggml_backend_dev_type1(
      device,
    ));
  }

  late final _ggml_backend_dev_type1Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ggml_backend_dev_t)>>(
          'ggml_backend_dev_type');
  late final _ggml_backend_dev_type1 =
      _ggml_backend_dev_type1Ptr.asFunction<int Function(ggml_backend_dev_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_dev_get_props(
    ggml_backend_dev_t device,
    ffi.Pointer<ggml_backend_dev_props> props,
  ) {
    return _ggml_backend_dev_get_props(
      device,
      props,
    );
  }

  late final _ggml_backend_dev_get_propsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ggml_backend_dev_t, ffi.Pointer<ggml_backend_dev_props>)>>(
      'ggml_backend_dev_get_props');
  late final _ggml_backend_dev_get_props =
      _ggml_backend_dev_get_propsPtr.asFunction<
          void Function(
              ggml_backend_dev_t, ffi.Pointer<ggml_backend_dev_props>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_reg_t ggml_backend_dev_backend_reg(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_backend_reg(
      device,
    );
  }

  late final _ggml_backend_dev_backend_regPtr = _lookup<
          ffi.NativeFunction<ggml_backend_reg_t Function(ggml_backend_dev_t)>>(
      'ggml_backend_dev_backend_reg');
  late final _ggml_backend_dev_backend_reg = _ggml_backend_dev_backend_regPtr
      .asFunction<ggml_backend_reg_t Function(ggml_backend_dev_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_t ggml_backend_dev_init(
    ggml_backend_dev_t device,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ggml_backend_dev_init(
      device,
      params,
    );
  }

  late final _ggml_backend_dev_initPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_t Function(ggml_backend_dev_t,
              ffi.Pointer<ffi.Char>)>>('ggml_backend_dev_init');
  late final _ggml_backend_dev_init = _ggml_backend_dev_initPtr.asFunction<
      ggml_backend_t Function(ggml_backend_dev_t, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_type_t ggml_backend_dev_buffer_type(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_buffer_type(
      device,
    );
  }

  late final _ggml_backend_dev_buffer_typePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_type_t Function(
              ggml_backend_dev_t)>>('ggml_backend_dev_buffer_type');
  late final _ggml_backend_dev_buffer_type = _ggml_backend_dev_buffer_typePtr
      .asFunction<ggml_backend_buffer_type_t Function(ggml_backend_dev_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_type_t ggml_backend_dev_host_buffer_type(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_host_buffer_type(
      device,
    );
  }

  late final _ggml_backend_dev_host_buffer_typePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_type_t Function(
              ggml_backend_dev_t)>>('ggml_backend_dev_host_buffer_type');
  late final _ggml_backend_dev_host_buffer_type =
      _ggml_backend_dev_host_buffer_typePtr.asFunction<
          ggml_backend_buffer_type_t Function(ggml_backend_dev_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_t ggml_backend_dev_buffer_from_host_ptr(
    ggml_backend_dev_t device,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int max_tensor_size,
  ) {
    return _ggml_backend_dev_buffer_from_host_ptr(
      device,
      ptr,
      size,
      max_tensor_size,
    );
  }

  late final _ggml_backend_dev_buffer_from_host_ptrPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_t Function(
              ggml_backend_dev_t,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size)>>('ggml_backend_dev_buffer_from_host_ptr');
  late final _ggml_backend_dev_buffer_from_host_ptr =
      _ggml_backend_dev_buffer_from_host_ptrPtr.asFunction<
          ggml_backend_buffer_t Function(
              ggml_backend_dev_t, ffi.Pointer<ffi.Void>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_dev_supports_op(
    ggml_backend_dev_t device,
    ffi.Pointer<ggml_tensor> op,
  ) {
    return _ggml_backend_dev_supports_op(
      device,
      op,
    );
  }

  late final _ggml_backend_dev_supports_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_dev_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_dev_supports_op');
  late final _ggml_backend_dev_supports_op =
      _ggml_backend_dev_supports_opPtr.asFunction<
          bool Function(ggml_backend_dev_t, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_dev_supports_buft(
    ggml_backend_dev_t device,
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_dev_supports_buft(
      device,
      buft,
    );
  }

  late final _ggml_backend_dev_supports_buftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_dev_t,
              ggml_backend_buffer_type_t)>>('ggml_backend_dev_supports_buft');
  late final _ggml_backend_dev_supports_buft =
      _ggml_backend_dev_supports_buftPtr.asFunction<
          bool Function(ggml_backend_dev_t, ggml_backend_buffer_type_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_dev_offload_op(
    ggml_backend_dev_t device,
    ffi.Pointer<ggml_tensor> op,
  ) {
    return _ggml_backend_dev_offload_op(
      device,
      op,
    );
  }

  late final _ggml_backend_dev_offload_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_dev_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_dev_offload_op');
  late final _ggml_backend_dev_offload_op =
      _ggml_backend_dev_offload_opPtr.asFunction<
          bool Function(ggml_backend_dev_t, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Char> ggml_backend_reg_name(
    ggml_backend_reg_t reg,
  ) {
    return _ggml_backend_reg_name(
      reg,
    );
  }

  late final _ggml_backend_reg_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_reg_t)>>(
      'ggml_backend_reg_name');
  late final _ggml_backend_reg_name = _ggml_backend_reg_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_reg_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_reg_dev_count(
    ggml_backend_reg_t reg,
  ) {
    return _ggml_backend_reg_dev_count(
      reg,
    );
  }

  late final _ggml_backend_reg_dev_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_reg_t)>>(
          'ggml_backend_reg_dev_count');
  late final _ggml_backend_reg_dev_count = _ggml_backend_reg_dev_countPtr
      .asFunction<int Function(ggml_backend_reg_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_dev_t ggml_backend_reg_dev_get(
    ggml_backend_reg_t reg,
    int index,
  ) {
    return _ggml_backend_reg_dev_get(
      reg,
      index,
    );
  }

  late final _ggml_backend_reg_dev_getPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_dev_t Function(
              ggml_backend_reg_t, ffi.Size)>>('ggml_backend_reg_dev_get');
  late final _ggml_backend_reg_dev_get = _ggml_backend_reg_dev_getPtr
      .asFunction<ggml_backend_dev_t Function(ggml_backend_reg_t, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ffi.Void> ggml_backend_reg_get_proc_address(
    ggml_backend_reg_t reg,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_backend_reg_get_proc_address(
      reg,
      name,
    );
  }

  late final _ggml_backend_reg_get_proc_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ggml_backend_reg_t,
              ffi.Pointer<ffi.Char>)>>('ggml_backend_reg_get_proc_address');
  late final _ggml_backend_reg_get_proc_address =
      _ggml_backend_reg_get_proc_addressPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ggml_backend_reg_t, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_device_register(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_device_register(
      device,
    );
  }

  late final _ggml_backend_device_registerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_dev_t)>>(
          'ggml_backend_device_register');
  late final _ggml_backend_device_register = _ggml_backend_device_registerPtr
      .asFunction<void Function(ggml_backend_dev_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_reg_count() {
    return _ggml_backend_reg_count();
  }

  late final _ggml_backend_reg_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'ggml_backend_reg_count');
  late final _ggml_backend_reg_count =
      _ggml_backend_reg_countPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_reg_t ggml_backend_reg_get(
    int index,
  ) {
    return _ggml_backend_reg_get(
      index,
    );
  }

  late final _ggml_backend_reg_getPtr =
      _lookup<ffi.NativeFunction<ggml_backend_reg_t Function(ffi.Size)>>(
          'ggml_backend_reg_get');
  late final _ggml_backend_reg_get =
      _ggml_backend_reg_getPtr.asFunction<ggml_backend_reg_t Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_reg_t ggml_backend_reg_by_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_backend_reg_by_name(
      name,
    );
  }

  late final _ggml_backend_reg_by_namePtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_reg_t Function(ffi.Pointer<ffi.Char>)>>(
      'ggml_backend_reg_by_name');
  late final _ggml_backend_reg_by_name = _ggml_backend_reg_by_namePtr
      .asFunction<ggml_backend_reg_t Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_dev_count() {
    return _ggml_backend_dev_count();
  }

  late final _ggml_backend_dev_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'ggml_backend_dev_count');
  late final _ggml_backend_dev_count =
      _ggml_backend_dev_countPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_dev_t ggml_backend_dev_get(
    int index,
  ) {
    return _ggml_backend_dev_get(
      index,
    );
  }

  late final _ggml_backend_dev_getPtr =
      _lookup<ffi.NativeFunction<ggml_backend_dev_t Function(ffi.Size)>>(
          'ggml_backend_dev_get');
  late final _ggml_backend_dev_get =
      _ggml_backend_dev_getPtr.asFunction<ggml_backend_dev_t Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_dev_t ggml_backend_dev_by_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_backend_dev_by_name(
      name,
    );
  }

  late final _ggml_backend_dev_by_namePtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_dev_t Function(ffi.Pointer<ffi.Char>)>>(
      'ggml_backend_dev_by_name');
  late final _ggml_backend_dev_by_name = _ggml_backend_dev_by_namePtr
      .asFunction<ggml_backend_dev_t Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_dev_t ggml_backend_dev_by_type(
    ggml_backend_dev_type type,
  ) {
    return _ggml_backend_dev_by_type(
      type.value,
    );
  }

  late final _ggml_backend_dev_by_typePtr =
      _lookup<ffi.NativeFunction<ggml_backend_dev_t Function(ffi.UnsignedInt)>>(
          'ggml_backend_dev_by_type');
  late final _ggml_backend_dev_by_type = _ggml_backend_dev_by_typePtr
      .asFunction<ggml_backend_dev_t Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_t ggml_backend_init_by_name(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ggml_backend_init_by_name(
      name,
      params,
    );
  }

  late final _ggml_backend_init_by_namePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ggml_backend_init_by_name');
  late final _ggml_backend_init_by_name =
      _ggml_backend_init_by_namePtr.asFunction<
          ggml_backend_t Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_t ggml_backend_init_by_type(
    ggml_backend_dev_type type,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ggml_backend_init_by_type(
      type.value,
      params,
    );
  }

  late final _ggml_backend_init_by_typePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_t Function(ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('ggml_backend_init_by_type');
  late final _ggml_backend_init_by_type = _ggml_backend_init_by_typePtr
      .asFunction<ggml_backend_t Function(int, ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_t ggml_backend_init_best() {
    return _ggml_backend_init_best();
  }

  late final _ggml_backend_init_bestPtr =
      _lookup<ffi.NativeFunction<ggml_backend_t Function()>>(
          'ggml_backend_init_best');
  late final _ggml_backend_init_best =
      _ggml_backend_init_bestPtr.asFunction<ggml_backend_t Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_reg_t ggml_backend_load(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ggml_backend_load(
      path,
    );
  }

  late final _ggml_backend_loadPtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_reg_t Function(ffi.Pointer<ffi.Char>)>>(
      'ggml_backend_load');
  late final _ggml_backend_load = _ggml_backend_loadPtr
      .asFunction<ggml_backend_reg_t Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_unload(
    ggml_backend_reg_t reg,
  ) {
    return _ggml_backend_unload(
      reg,
    );
  }

  late final _ggml_backend_unloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_reg_t)>>(
          'ggml_backend_unload');
  late final _ggml_backend_unload =
      _ggml_backend_unloadPtr.asFunction<void Function(ggml_backend_reg_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_load_all() {
    return _ggml_backend_load_all();
  }

  late final _ggml_backend_load_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_backend_load_all');
  late final _ggml_backend_load_all =
      _ggml_backend_load_allPtr.asFunction<void Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_load_all_from_path(
    ffi.Pointer<ffi.Char> dir_path,
  ) {
    return _ggml_backend_load_all_from_path(
      dir_path,
    );
  }

  late final _ggml_backend_load_all_from_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'ggml_backend_load_all_from_path');
  late final _ggml_backend_load_all_from_path =
      _ggml_backend_load_all_from_pathPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_sched_t ggml_backend_sched_new(
    ffi.Pointer<ggml_backend_t> backends,
    ffi.Pointer<ggml_backend_buffer_type_t> bufts,
    int n_backends,
    int graph_size,
    bool parallel,
  ) {
    return _ggml_backend_sched_new(
      backends,
      bufts,
      n_backends,
      graph_size,
      parallel,
    );
  }

  late final _ggml_backend_sched_newPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_sched_t Function(
              ffi.Pointer<ggml_backend_t>,
              ffi.Pointer<ggml_backend_buffer_type_t>,
              ffi.Int,
              ffi.Size,
              ffi.Bool)>>('ggml_backend_sched_new');
  late final _ggml_backend_sched_new = _ggml_backend_sched_newPtr.asFunction<
      ggml_backend_sched_t Function(ffi.Pointer<ggml_backend_t>,
          ffi.Pointer<ggml_backend_buffer_type_t>, int, int, bool)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_sched_free(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_free(
      sched,
    );
  }

  late final _ggml_backend_sched_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_free');
  late final _ggml_backend_sched_free = _ggml_backend_sched_freePtr
      .asFunction<void Function(ggml_backend_sched_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_sched_reserve(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_cgraph> measure_graph,
  ) {
    return _ggml_backend_sched_reserve(
      sched,
      measure_graph,
    );
  }

  late final _ggml_backend_sched_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_sched_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_sched_reserve');
  late final _ggml_backend_sched_reserve =
      _ggml_backend_sched_reservePtr.asFunction<
          bool Function(ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_sched_get_n_backends(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_get_n_backends(
      sched,
    );
  }

  late final _ggml_backend_sched_get_n_backendsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_get_n_backends');
  late final _ggml_backend_sched_get_n_backends =
      _ggml_backend_sched_get_n_backendsPtr
          .asFunction<int Function(ggml_backend_sched_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_t ggml_backend_sched_get_backend(
    ggml_backend_sched_t sched,
    int i,
  ) {
    return _ggml_backend_sched_get_backend(
      sched,
      i,
    );
  }

  late final _ggml_backend_sched_get_backendPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_t Function(ggml_backend_sched_t,
              ffi.Int)>>('ggml_backend_sched_get_backend');
  late final _ggml_backend_sched_get_backend =
      _ggml_backend_sched_get_backendPtr
          .asFunction<ggml_backend_t Function(ggml_backend_sched_t, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_sched_get_n_splits(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_get_n_splits(
      sched,
    );
  }

  late final _ggml_backend_sched_get_n_splitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_get_n_splits');
  late final _ggml_backend_sched_get_n_splits =
      _ggml_backend_sched_get_n_splitsPtr
          .asFunction<int Function(ggml_backend_sched_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_sched_get_n_copies(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_get_n_copies(
      sched,
    );
  }

  late final _ggml_backend_sched_get_n_copiesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_get_n_copies');
  late final _ggml_backend_sched_get_n_copies =
      _ggml_backend_sched_get_n_copiesPtr
          .asFunction<int Function(ggml_backend_sched_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_backend_sched_get_buffer_size(
    ggml_backend_sched_t sched,
    ggml_backend_t backend,
  ) {
    return _ggml_backend_sched_get_buffer_size(
      sched,
      backend,
    );
  }

  late final _ggml_backend_sched_get_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ggml_backend_sched_t,
              ggml_backend_t)>>('ggml_backend_sched_get_buffer_size');
  late final _ggml_backend_sched_get_buffer_size =
      _ggml_backend_sched_get_buffer_sizePtr
          .asFunction<int Function(ggml_backend_sched_t, ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_sched_set_tensor_backend(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_tensor> node,
    ggml_backend_t backend,
  ) {
    return _ggml_backend_sched_set_tensor_backend(
      sched,
      node,
      backend,
    );
  }

  late final _ggml_backend_sched_set_tensor_backendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_sched_t, ffi.Pointer<ggml_tensor>,
              ggml_backend_t)>>('ggml_backend_sched_set_tensor_backend');
  late final _ggml_backend_sched_set_tensor_backend =
      _ggml_backend_sched_set_tensor_backendPtr.asFunction<
          void Function(ggml_backend_sched_t, ffi.Pointer<ggml_tensor>,
              ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_t ggml_backend_sched_get_tensor_backend(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_tensor> node,
  ) {
    return _ggml_backend_sched_get_tensor_backend(
      sched,
      node,
    );
  }

  late final _ggml_backend_sched_get_tensor_backendPtr = _lookup<
          ffi.NativeFunction<
              ggml_backend_t Function(
                  ggml_backend_sched_t, ffi.Pointer<ggml_tensor>)>>(
      'ggml_backend_sched_get_tensor_backend');
  late final _ggml_backend_sched_get_tensor_backend =
      _ggml_backend_sched_get_tensor_backendPtr.asFunction<
          ggml_backend_t Function(
              ggml_backend_sched_t, ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_sched_alloc_graph(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return _ggml_backend_sched_alloc_graph(
      sched,
      graph,
    );
  }

  late final _ggml_backend_sched_alloc_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_sched_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_sched_alloc_graph');
  late final _ggml_backend_sched_alloc_graph =
      _ggml_backend_sched_alloc_graphPtr.asFunction<
          bool Function(ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_status ggml_backend_sched_graph_compute(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return ggml_status.fromValue(_ggml_backend_sched_graph_compute(
      sched,
      graph,
    ));
  }

  late final _ggml_backend_sched_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_sched_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_sched_graph_compute');
  late final _ggml_backend_sched_graph_compute =
      _ggml_backend_sched_graph_computePtr.asFunction<
          int Function(ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_status ggml_backend_sched_graph_compute_async(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return ggml_status.fromValue(_ggml_backend_sched_graph_compute_async(
      sched,
      graph,
    ));
  }

  late final _ggml_backend_sched_graph_compute_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>>(
      'ggml_backend_sched_graph_compute_async');
  late final _ggml_backend_sched_graph_compute_async =
      _ggml_backend_sched_graph_compute_asyncPtr.asFunction<
          int Function(ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_sched_synchronize(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_synchronize(
      sched,
    );
  }

  late final _ggml_backend_sched_synchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_synchronize');
  late final _ggml_backend_sched_synchronize =
      _ggml_backend_sched_synchronizePtr
          .asFunction<void Function(ggml_backend_sched_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_sched_reset(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_reset(
      sched,
    );
  }

  late final _ggml_backend_sched_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_reset');
  late final _ggml_backend_sched_reset = _ggml_backend_sched_resetPtr
      .asFunction<void Function(ggml_backend_sched_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_sched_set_eval_callback(
    ggml_backend_sched_t sched,
    ggml_backend_sched_eval_callback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _ggml_backend_sched_set_eval_callback(
      sched,
      callback,
      user_data,
    );
  }

  late final _ggml_backend_sched_set_eval_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_sched_t,
              ggml_backend_sched_eval_callback,
              ffi.Pointer<ffi.Void>)>>('ggml_backend_sched_set_eval_callback');
  late final _ggml_backend_sched_set_eval_callback =
      _ggml_backend_sched_set_eval_callbackPtr.asFunction<
          void Function(ggml_backend_sched_t, ggml_backend_sched_eval_callback,
              ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_graph_copy ggml_backend_graph_copy1(
    ggml_backend_t backend,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return _ggml_backend_graph_copy1(
      backend,
      graph,
    );
  }

  late final _ggml_backend_graph_copy1Ptr = _lookup<
      ffi.NativeFunction<
          ggml_backend_graph_copy Function(ggml_backend_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_graph_copy');
  late final _ggml_backend_graph_copy1 =
      _ggml_backend_graph_copy1Ptr.asFunction<
          ggml_backend_graph_copy Function(
              ggml_backend_t, ffi.Pointer<ggml_cgraph>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_graph_copy_free(
    ggml_backend_graph_copy copy,
  ) {
    return _ggml_backend_graph_copy_free(
      copy,
    );
  }

  late final _ggml_backend_graph_copy_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_graph_copy)>>(
          'ggml_backend_graph_copy_free');
  late final _ggml_backend_graph_copy_free = _ggml_backend_graph_copy_freePtr
      .asFunction<void Function(ggml_backend_graph_copy)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_compare_graph_backend(
    ggml_backend_t backend1,
    ggml_backend_t backend2,
    ffi.Pointer<ggml_cgraph> graph,
    ggml_backend_eval_callback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _ggml_backend_compare_graph_backend(
      backend1,
      backend2,
      graph,
      callback,
      user_data,
    );
  }

  late final _ggml_backend_compare_graph_backendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ggml_backend_t,
              ggml_backend_t,
              ffi.Pointer<ggml_cgraph>,
              ggml_backend_eval_callback,
              ffi.Pointer<ffi.Void>)>>('ggml_backend_compare_graph_backend');
  late final _ggml_backend_compare_graph_backend =
      _ggml_backend_compare_graph_backendPtr.asFunction<
          bool Function(
              ggml_backend_t,
              ggml_backend_t,
              ffi.Pointer<ggml_cgraph>,
              ggml_backend_eval_callback,
              ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_tensor_alloc(
    ggml_backend_buffer_t buffer,
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> addr,
  ) {
    return _ggml_backend_tensor_alloc(
      buffer,
      tensor,
      addr,
    );
  }

  late final _ggml_backend_tensor_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_buffer_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>)>>('ggml_backend_tensor_alloc');
  late final _ggml_backend_tensor_alloc =
      _ggml_backend_tensor_allocPtr.asFunction<
          void Function(ggml_backend_buffer_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_view_init(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_backend_view_init(
      tensor,
    );
  }

  late final _ggml_backend_view_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_backend_view_init');
  late final _ggml_backend_view_init = _ggml_backend_view_initPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_t ggml_backend_cpu_buffer_from_ptr(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _ggml_backend_cpu_buffer_from_ptr(
      ptr,
      size,
    );
  }

  late final _ggml_backend_cpu_buffer_from_ptrPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_t Function(ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ggml_backend_cpu_buffer_from_ptr');
  late final _ggml_backend_cpu_buffer_from_ptr =
      _ggml_backend_cpu_buffer_from_ptrPtr.asFunction<
          ggml_backend_buffer_t Function(ffi.Pointer<ffi.Void>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_buffer_type_t ggml_backend_cpu_buffer_type() {
    return _ggml_backend_cpu_buffer_type();
  }

  late final _ggml_backend_cpu_buffer_typePtr =
      _lookup<ffi.NativeFunction<ggml_backend_buffer_type_t Function()>>(
          'ggml_backend_cpu_buffer_type');
  late final _ggml_backend_cpu_buffer_type = _ggml_backend_cpu_buffer_typePtr
      .asFunction<ggml_backend_buffer_type_t Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_numa_init(
    ggml_numa_strategy numa,
  ) {
    return _ggml_numa_init(
      numa.value,
    );
  }

  late final _ggml_numa_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'ggml_numa_init');
  late final _ggml_numa_init =
      _ggml_numa_initPtr.asFunction<void Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_is_numa() {
    return _ggml_is_numa();
  }

  late final _ggml_is_numaPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('ggml_is_numa');
  late final _ggml_is_numa = _ggml_is_numaPtr.asFunction<bool Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_new_i32(
    ffi.Pointer<ggml_context> ctx,
    int value,
  ) {
    return _ggml_new_i32(
      ctx,
      value,
    );
  }

  late final _ggml_new_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Int32)>>('ggml_new_i32');
  late final _ggml_new_i32 = _ggml_new_i32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_new_f32(
    ffi.Pointer<ggml_context> ctx,
    double value,
  ) {
    return _ggml_new_f32(
      ctx,
      value,
    );
  }

  late final _ggml_new_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Float)>>('ggml_new_f32');
  late final _ggml_new_f32 = _ggml_new_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_i32(
    ffi.Pointer<ggml_tensor> tensor,
    int value,
  ) {
    return _ggml_set_i32(
      tensor,
      value,
    );
  }

  late final _ggml_set_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>, ffi.Int32)>>('ggml_set_i32');
  late final _ggml_set_i32 = _ggml_set_i32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_tensor> ggml_set_f32(
    ffi.Pointer<ggml_tensor> tensor,
    double value,
  ) {
    return _ggml_set_f32(
      tensor,
      value,
    );
  }

  late final _ggml_set_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_set_f32');
  late final _ggml_set_f32 = _ggml_set_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_get_i32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
  ) {
    return _ggml_get_i32_1d(
      tensor,
      i,
    );
  }

  late final _ggml_get_i32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_get_i32_1d');
  late final _ggml_get_i32_1d = _ggml_get_i32_1dPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_i32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    int value,
  ) {
    return _ggml_set_i32_1d(
      tensor,
      i,
      value,
    );
  }

  late final _ggml_set_i32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int,
              ffi.Int32)>>('ggml_set_i32_1d');
  late final _ggml_set_i32_1d = _ggml_set_i32_1dPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_get_i32_nd(
    ffi.Pointer<ggml_tensor> tensor,
    int i0,
    int i1,
    int i2,
    int i3,
  ) {
    return _ggml_get_i32_nd(
      tensor,
      i0,
      i1,
      i2,
      i3,
    );
  }

  late final _ggml_get_i32_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('ggml_get_i32_nd');
  late final _ggml_get_i32_nd = _ggml_get_i32_ndPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_i32_nd(
    ffi.Pointer<ggml_tensor> tensor,
    int i0,
    int i1,
    int i2,
    int i3,
    int value,
  ) {
    return _ggml_set_i32_nd(
      tensor,
      i0,
      i1,
      i2,
      i3,
      value,
    );
  }

  late final _ggml_set_i32_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int32)>>('ggml_set_i32_nd');
  late final _ggml_set_i32_nd = _ggml_set_i32_ndPtr.asFunction<
      void Function(ffi.Pointer<ggml_tensor>, int, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  double ggml_get_f32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
  ) {
    return _ggml_get_f32_1d(
      tensor,
      i,
    );
  }

  late final _ggml_get_f32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_get_f32_1d');
  late final _ggml_get_f32_1d = _ggml_get_f32_1dPtr
      .asFunction<double Function(ffi.Pointer<ggml_tensor>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_f32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    double value,
  ) {
    return _ggml_set_f32_1d(
      tensor,
      i,
      value,
    );
  }

  late final _ggml_set_f32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int,
              ffi.Float)>>('ggml_set_f32_1d');
  late final _ggml_set_f32_1d = _ggml_set_f32_1dPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  double ggml_get_f32_nd(
    ffi.Pointer<ggml_tensor> tensor,
    int i0,
    int i1,
    int i2,
    int i3,
  ) {
    return _ggml_get_f32_nd(
      tensor,
      i0,
      i1,
      i2,
      i3,
    );
  }

  late final _ggml_get_f32_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('ggml_get_f32_nd');
  late final _ggml_get_f32_nd = _ggml_get_f32_ndPtr.asFunction<
      double Function(ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_set_f32_nd(
    ffi.Pointer<ggml_tensor> tensor,
    int i0,
    int i1,
    int i2,
    int i3,
    double value,
  ) {
    return _ggml_set_f32_nd(
      tensor,
      i0,
      i1,
      i2,
      i3,
      value,
    );
  }

  late final _ggml_set_f32_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Float)>>('ggml_set_f32_nd');
  late final _ggml_set_f32_nd = _ggml_set_f32_ndPtr.asFunction<
      void Function(ffi.Pointer<ggml_tensor>, int, int, int, int, double)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_threadpool> ggml_threadpool_new(
    ffi.Pointer<ggml_threadpool_params> params,
  ) {
    return _ggml_threadpool_new(
      params,
    );
  }

  late final _ggml_threadpool_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_threadpool> Function(
              ffi.Pointer<ggml_threadpool_params>)>>('ggml_threadpool_new');
  late final _ggml_threadpool_new = _ggml_threadpool_newPtr.asFunction<
      ffi.Pointer<ggml_threadpool> Function(
          ffi.Pointer<ggml_threadpool_params>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_threadpool_free(
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_threadpool_free(
      threadpool,
    );
  }

  late final _ggml_threadpool_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_threadpool>)>>(
      'ggml_threadpool_free');
  late final _ggml_threadpool_free = _ggml_threadpool_freePtr
      .asFunction<void Function(ffi.Pointer<ggml_threadpool>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_threadpool_get_n_threads(
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_threadpool_get_n_threads(
      threadpool,
    );
  }

  late final _ggml_threadpool_get_n_threadsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_threadpool>)>>(
      'ggml_threadpool_get_n_threads');
  late final _ggml_threadpool_get_n_threads = _ggml_threadpool_get_n_threadsPtr
      .asFunction<int Function(ffi.Pointer<ggml_threadpool>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_threadpool_pause(
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_threadpool_pause(
      threadpool,
    );
  }

  late final _ggml_threadpool_pausePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_threadpool>)>>(
      'ggml_threadpool_pause');
  late final _ggml_threadpool_pause = _ggml_threadpool_pausePtr
      .asFunction<void Function(ffi.Pointer<ggml_threadpool>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_threadpool_resume(
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_threadpool_resume(
      threadpool,
    );
  }

  late final _ggml_threadpool_resumePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_threadpool>)>>(
      'ggml_threadpool_resume');
  late final _ggml_threadpool_resume = _ggml_threadpool_resumePtr
      .asFunction<void Function(ffi.Pointer<ggml_threadpool>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_cplan ggml_graph_plan(
    ffi.Pointer<ggml_cgraph> cgraph,
    int n_threads,
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_graph_plan(
      cgraph,
      n_threads,
      threadpool,
    );
  }

  late final _ggml_graph_planPtr = _lookup<
      ffi.NativeFunction<
          ggml_cplan Function(ffi.Pointer<ggml_cgraph>, ffi.Int,
              ffi.Pointer<ggml_threadpool>)>>('ggml_graph_plan');
  late final _ggml_graph_plan = _ggml_graph_planPtr.asFunction<
      ggml_cplan Function(
          ffi.Pointer<ggml_cgraph>, int, ffi.Pointer<ggml_threadpool>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_status ggml_graph_compute(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_cplan> cplan,
  ) {
    return ggml_status.fromValue(_ggml_graph_compute(
      cgraph,
      cplan,
    ));
  }

  late final _ggml_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_cplan>)>>('ggml_graph_compute');
  late final _ggml_graph_compute = _ggml_graph_computePtr.asFunction<
      int Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cplan>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_status ggml_graph_compute_with_ctx(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> cgraph,
    int n_threads,
  ) {
    return ggml_status.fromValue(_ggml_graph_compute_with_ctx(
      ctx,
      cgraph,
      n_threads,
    ));
  }

  late final _ggml_graph_compute_with_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>,
              ffi.Int)>>('ggml_graph_compute_with_ctx');
  late final _ggml_graph_compute_with_ctx =
      _ggml_graph_compute_with_ctxPtr.asFunction<
          int Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_sse3() {
    return _ggml_cpu_has_sse3();
  }

  late final _ggml_cpu_has_sse3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_sse3');
  late final _ggml_cpu_has_sse3 =
      _ggml_cpu_has_sse3Ptr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_ssse3() {
    return _ggml_cpu_has_ssse3();
  }

  late final _ggml_cpu_has_ssse3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_ssse3');
  late final _ggml_cpu_has_ssse3 =
      _ggml_cpu_has_ssse3Ptr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_avx() {
    return _ggml_cpu_has_avx();
  }

  late final _ggml_cpu_has_avxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx');
  late final _ggml_cpu_has_avx =
      _ggml_cpu_has_avxPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_avx_vnni() {
    return _ggml_cpu_has_avx_vnni();
  }

  late final _ggml_cpu_has_avx_vnniPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx_vnni');
  late final _ggml_cpu_has_avx_vnni =
      _ggml_cpu_has_avx_vnniPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_avx2() {
    return _ggml_cpu_has_avx2();
  }

  late final _ggml_cpu_has_avx2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx2');
  late final _ggml_cpu_has_avx2 =
      _ggml_cpu_has_avx2Ptr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_f16c() {
    return _ggml_cpu_has_f16c();
  }

  late final _ggml_cpu_has_f16cPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_f16c');
  late final _ggml_cpu_has_f16c =
      _ggml_cpu_has_f16cPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_fma() {
    return _ggml_cpu_has_fma();
  }

  late final _ggml_cpu_has_fmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_fma');
  late final _ggml_cpu_has_fma =
      _ggml_cpu_has_fmaPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_avx512() {
    return _ggml_cpu_has_avx512();
  }

  late final _ggml_cpu_has_avx512Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx512');
  late final _ggml_cpu_has_avx512 =
      _ggml_cpu_has_avx512Ptr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_avx512_vbmi() {
    return _ggml_cpu_has_avx512_vbmi();
  }

  late final _ggml_cpu_has_avx512_vbmiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_avx512_vbmi');
  late final _ggml_cpu_has_avx512_vbmi =
      _ggml_cpu_has_avx512_vbmiPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_avx512_vnni() {
    return _ggml_cpu_has_avx512_vnni();
  }

  late final _ggml_cpu_has_avx512_vnniPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_avx512_vnni');
  late final _ggml_cpu_has_avx512_vnni =
      _ggml_cpu_has_avx512_vnniPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_avx512_bf16() {
    return _ggml_cpu_has_avx512_bf16();
  }

  late final _ggml_cpu_has_avx512_bf16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_avx512_bf16');
  late final _ggml_cpu_has_avx512_bf16 =
      _ggml_cpu_has_avx512_bf16Ptr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_amx_int8() {
    return _ggml_cpu_has_amx_int8();
  }

  late final _ggml_cpu_has_amx_int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_amx_int8');
  late final _ggml_cpu_has_amx_int8 =
      _ggml_cpu_has_amx_int8Ptr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_neon() {
    return _ggml_cpu_has_neon();
  }

  late final _ggml_cpu_has_neonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_neon');
  late final _ggml_cpu_has_neon =
      _ggml_cpu_has_neonPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_arm_fma() {
    return _ggml_cpu_has_arm_fma();
  }

  late final _ggml_cpu_has_arm_fmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_arm_fma');
  late final _ggml_cpu_has_arm_fma =
      _ggml_cpu_has_arm_fmaPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_fp16_va() {
    return _ggml_cpu_has_fp16_va();
  }

  late final _ggml_cpu_has_fp16_vaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_fp16_va');
  late final _ggml_cpu_has_fp16_va =
      _ggml_cpu_has_fp16_vaPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_dotprod() {
    return _ggml_cpu_has_dotprod();
  }

  late final _ggml_cpu_has_dotprodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_dotprod');
  late final _ggml_cpu_has_dotprod =
      _ggml_cpu_has_dotprodPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_matmul_int8() {
    return _ggml_cpu_has_matmul_int8();
  }

  late final _ggml_cpu_has_matmul_int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_matmul_int8');
  late final _ggml_cpu_has_matmul_int8 =
      _ggml_cpu_has_matmul_int8Ptr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_sve() {
    return _ggml_cpu_has_sve();
  }

  late final _ggml_cpu_has_svePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_sve');
  late final _ggml_cpu_has_sve =
      _ggml_cpu_has_svePtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_get_sve_cnt() {
    return _ggml_cpu_get_sve_cnt();
  }

  late final _ggml_cpu_get_sve_cntPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_get_sve_cnt');
  late final _ggml_cpu_get_sve_cnt =
      _ggml_cpu_get_sve_cntPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_riscv_v() {
    return _ggml_cpu_has_riscv_v();
  }

  late final _ggml_cpu_has_riscv_vPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_riscv_v');
  late final _ggml_cpu_has_riscv_v =
      _ggml_cpu_has_riscv_vPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_vsx() {
    return _ggml_cpu_has_vsx();
  }

  late final _ggml_cpu_has_vsxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_vsx');
  late final _ggml_cpu_has_vsx =
      _ggml_cpu_has_vsxPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_wasm_simd() {
    return _ggml_cpu_has_wasm_simd();
  }

  late final _ggml_cpu_has_wasm_simdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_wasm_simd');
  late final _ggml_cpu_has_wasm_simd =
      _ggml_cpu_has_wasm_simdPtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  int ggml_cpu_has_llamafile() {
    return _ggml_cpu_has_llamafile();
  }

  late final _ggml_cpu_has_llamafilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_llamafile');
  late final _ggml_cpu_has_llamafile =
      _ggml_cpu_has_llamafilePtr.asFunction<int Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ffi.Pointer<ggml_type_traits_cpu> ggml_get_type_traits_cpu(
    ggml_type type,
  ) {
    return _ggml_get_type_traits_cpu(
      type.value,
    );
  }

  late final _ggml_get_type_traits_cpuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_type_traits_cpu> Function(
              ffi.UnsignedInt)>>('ggml_get_type_traits_cpu');
  late final _ggml_get_type_traits_cpu = _ggml_get_type_traits_cpuPtr
      .asFunction<ffi.Pointer<ggml_type_traits_cpu> Function(int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_cpu_init() {
    return _ggml_cpu_init();
  }

  late final _ggml_cpu_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_cpu_init');
  late final _ggml_cpu_init = _ggml_cpu_initPtr.asFunction<void Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_t ggml_backend_cpu_init() {
    return _ggml_backend_cpu_init();
  }

  late final _ggml_backend_cpu_initPtr =
      _lookup<ffi.NativeFunction<ggml_backend_t Function()>>(
          'ggml_backend_cpu_init');
  late final _ggml_backend_cpu_init =
      _ggml_backend_cpu_initPtr.asFunction<ggml_backend_t Function()>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  bool ggml_backend_is_cpu(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_is_cpu(
      backend,
    );
  }

  late final _ggml_backend_is_cpuPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ggml_backend_t)>>(
          'ggml_backend_is_cpu');
  late final _ggml_backend_is_cpu =
      _ggml_backend_is_cpuPtr.asFunction<bool Function(ggml_backend_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_cpu_set_n_threads(
    ggml_backend_t backend_cpu,
    int n_threads,
  ) {
    return _ggml_backend_cpu_set_n_threads(
      backend_cpu,
      n_threads,
    );
  }

  late final _ggml_backend_cpu_set_n_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_t, ffi.Int)>>(
          'ggml_backend_cpu_set_n_threads');
  late final _ggml_backend_cpu_set_n_threads =
      _ggml_backend_cpu_set_n_threadsPtr
          .asFunction<void Function(ggml_backend_t, int)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_cpu_set_threadpool(
    ggml_backend_t backend_cpu,
    ggml_threadpool_t threadpool,
  ) {
    return _ggml_backend_cpu_set_threadpool(
      backend_cpu,
      threadpool,
    );
  }

  late final _ggml_backend_cpu_set_threadpoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_t,
              ggml_threadpool_t)>>('ggml_backend_cpu_set_threadpool');
  late final _ggml_backend_cpu_set_threadpool =
      _ggml_backend_cpu_set_threadpoolPtr
          .asFunction<void Function(ggml_backend_t, ggml_threadpool_t)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  void ggml_backend_cpu_set_abort_callback(
    ggml_backend_t backend_cpu,
    ggml_abort_callback abort_callback,
    ffi.Pointer<ffi.Void> abort_callback_data,
  ) {
    return _ggml_backend_cpu_set_abort_callback(
      backend_cpu,
      abort_callback,
      abort_callback_data,
    );
  }

  late final _ggml_backend_cpu_set_abort_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_t, ggml_abort_callback,
              ffi.Pointer<ffi.Void>)>>('ggml_backend_cpu_set_abort_callback');
  late final _ggml_backend_cpu_set_abort_callback =
      _ggml_backend_cpu_set_abort_callbackPtr.asFunction<
          void Function(
              ggml_backend_t, ggml_abort_callback, ffi.Pointer<ffi.Void>)>();

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_reg_t ggml_backend_cpu_reg() {
    return _ggml_backend_cpu_reg();
  }

  late final _ggml_backend_cpu_regPtr =
      _lookup<ffi.NativeFunction<ggml_backend_reg_t Function()>>(
          'ggml_backend_cpu_reg');
  late final _ggml_backend_cpu_reg =
      _ggml_backend_cpu_regPtr.asFunction<ggml_backend_reg_t Function()>();
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class max_align_t extends ffi.Opaque {}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

final class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Long;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dart__off_t = int;

final class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Long;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dart__off64_t = int;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  external ffi.Pointer<ffi.Pointer<_IO_FILE>> _prevchain;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dart_IO_lock_t = void;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

final class _IO_cookie_io_functions_t extends ffi.Struct {
  external ffi.Pointer<cookie_read_function_t> read;

  external ffi.Pointer<cookie_write_function_t> write;

  external ffi.Pointer<cookie_seek_function_t> seek;

  external ffi.Pointer<cookie_close_function_t> close;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef cookie_read_function_t = ffi.NativeFunction<
    __ssize_t Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef __ssize_t = ffi.Long;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef Dart__ssize_t = int;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef cookie_write_function_t = ffi.NativeFunction<
    __ssize_t Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef cookie_seek_function_t = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<__off64_t> __pos, ffi.Int __w)>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef cookie_close_function_t
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> __cookie)>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef FILE = _IO_FILE;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef cookie_io_functions_t = _IO_cookie_io_functions_t;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_status {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_STATUS_ALLOC_FAILED(-2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_STATUS_FAILED(-1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_STATUS_SUCCESS(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_STATUS_ABORTED(1);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_status(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_status fromValue(int value) => switch (value) {
        -2 => GGML_STATUS_ALLOC_FAILED,
        -1 => GGML_STATUS_FAILED,
        0 => GGML_STATUS_SUCCESS,
        1 => GGML_STATUS_ABORTED,
        _ => throw ArgumentError("Unknown value for ggml_status: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_fp16_t = ffi.Uint16;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_fp16_t = int;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_bf16_t extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Uint16()
  external int bits;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_object extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_context extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_cgraph extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_type {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_F32(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_F16(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q4_0(2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q4_1(3),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q5_0(6),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_TYPE_Q5_1(7),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_TYPE_Q8_0(8),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q8_1(9),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q2_K(10),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q3_K(11),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q4_K(12),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q5_K(13),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q6_K(14),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_Q8_K(15),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_IQ2_XXS(16),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_IQ2_XS(17),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_IQ3_XXS(18),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_IQ1_S(19),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_IQ4_NL(20),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_IQ3_S(21),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_IQ2_S(22),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_IQ4_XS(23),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_I8(24),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_I16(25),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_I32(26),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_I64(27),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_TYPE_F64(28),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_TYPE_IQ1_M(29),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_TYPE_BF16(30),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_TQ1_0(34),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_TQ2_0(35),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TYPE_COUNT(39);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;

  const ggml_type(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_type fromValue(int value) => switch (value) {
        0 => GGML_TYPE_F32,
        1 => GGML_TYPE_F16,
        2 => GGML_TYPE_Q4_0,
        3 => GGML_TYPE_Q4_1,
        6 => GGML_TYPE_Q5_0,
        7 => GGML_TYPE_Q5_1,
        8 => GGML_TYPE_Q8_0,
        9 => GGML_TYPE_Q8_1,
        10 => GGML_TYPE_Q2_K,
        11 => GGML_TYPE_Q3_K,
        12 => GGML_TYPE_Q4_K,
        13 => GGML_TYPE_Q5_K,
        14 => GGML_TYPE_Q6_K,
        15 => GGML_TYPE_Q8_K,
        16 => GGML_TYPE_IQ2_XXS,
        17 => GGML_TYPE_IQ2_XS,
        18 => GGML_TYPE_IQ3_XXS,
        19 => GGML_TYPE_IQ1_S,
        20 => GGML_TYPE_IQ4_NL,
        21 => GGML_TYPE_IQ3_S,
        22 => GGML_TYPE_IQ2_S,
        23 => GGML_TYPE_IQ4_XS,
        24 => GGML_TYPE_I8,
        25 => GGML_TYPE_I16,
        26 => GGML_TYPE_I32,
        27 => GGML_TYPE_I64,
        28 => GGML_TYPE_F64,
        29 => GGML_TYPE_IQ1_M,
        30 => GGML_TYPE_BF16,
        34 => GGML_TYPE_TQ1_0,
        35 => GGML_TYPE_TQ2_0,
        39 => GGML_TYPE_COUNT,
        _ => throw ArgumentError("Unknown value for ggml_type: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_prec {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_PREC_DEFAULT(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_PREC_F32(1);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_prec(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_prec fromValue(int value) => switch (value) {
        0 => GGML_PREC_DEFAULT,
        1 => GGML_PREC_F32,
        _ => throw ArgumentError("Unknown value for ggml_prec: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_ftype {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_UNKNOWN(-1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_ALL_F32(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_F16(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_Q4_0(2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_Q4_1(3),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_FTYPE_MOSTLY_Q4_1_SOME_F16(4),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_Q8_0(7),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_FTYPE_MOSTLY_Q5_0(8),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_FTYPE_MOSTLY_Q5_1(9),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_FTYPE_MOSTLY_Q2_K(10),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_Q3_K(11),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_FTYPE_MOSTLY_Q4_K(12),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_Q5_K(13),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_Q6_K(14),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ2_XXS(15),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ2_XS(16),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ3_XXS(17),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ1_S(18),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ4_NL(19),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ3_S(20),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ2_S(21),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ4_XS(22),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_IQ1_M(23),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_FTYPE_MOSTLY_BF16(24);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_ftype(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_ftype fromValue(int value) => switch (value) {
        -1 => GGML_FTYPE_UNKNOWN,
        0 => GGML_FTYPE_ALL_F32,
        1 => GGML_FTYPE_MOSTLY_F16,
        2 => GGML_FTYPE_MOSTLY_Q4_0,
        3 => GGML_FTYPE_MOSTLY_Q4_1,
        4 => GGML_FTYPE_MOSTLY_Q4_1_SOME_F16,
        7 => GGML_FTYPE_MOSTLY_Q8_0,
        8 => GGML_FTYPE_MOSTLY_Q5_0,
        9 => GGML_FTYPE_MOSTLY_Q5_1,
        10 => GGML_FTYPE_MOSTLY_Q2_K,
        11 => GGML_FTYPE_MOSTLY_Q3_K,
        12 => GGML_FTYPE_MOSTLY_Q4_K,
        13 => GGML_FTYPE_MOSTLY_Q5_K,
        14 => GGML_FTYPE_MOSTLY_Q6_K,
        15 => GGML_FTYPE_MOSTLY_IQ2_XXS,
        16 => GGML_FTYPE_MOSTLY_IQ2_XS,
        17 => GGML_FTYPE_MOSTLY_IQ3_XXS,
        18 => GGML_FTYPE_MOSTLY_IQ1_S,
        19 => GGML_FTYPE_MOSTLY_IQ4_NL,
        20 => GGML_FTYPE_MOSTLY_IQ3_S,
        21 => GGML_FTYPE_MOSTLY_IQ2_S,
        22 => GGML_FTYPE_MOSTLY_IQ4_XS,
        23 => GGML_FTYPE_MOSTLY_IQ1_M,
        24 => GGML_FTYPE_MOSTLY_BF16,
        _ => throw ArgumentError("Unknown value for ggml_ftype: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_op {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_NONE(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_DUP(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_ADD(2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_ADD1(3),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_ACC(4),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SUB(5),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MUL(6),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_DIV(7),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SQR(8),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SQRT(9),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_LOG(10),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SIN(11),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_COS(12),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SUM(13),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SUM_ROWS(14),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MEAN(15),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_ARGMAX(16),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_COUNT_EQUAL(17),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_REPEAT(18),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_REPEAT_BACK(19),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_CONCAT(20),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SILU_BACK(21),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_NORM(22),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_RMS_NORM(23),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_RMS_NORM_BACK(24),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_GROUP_NORM(25),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MUL_MAT(26),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MUL_MAT_ID(27),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_OUT_PROD(28),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SCALE(29),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SET(30),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_CPY(31),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_CONT(32),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_RESHAPE(33),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_VIEW(34),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_PERMUTE(35),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_TRANSPOSE(36),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_GET_ROWS(37),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_GET_ROWS_BACK(38),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_DIAG(39),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_DIAG_MASK_INF(40),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_DIAG_MASK_ZERO(41),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_SOFT_MAX(42),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SOFT_MAX_BACK(43),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_ROPE(44),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_ROPE_BACK(45),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_CLAMP(46),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_CONV_TRANSPOSE_1D(47),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_IM2COL(48),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_IM2COL_BACK(49),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_CONV_TRANSPOSE_2D(50),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_POOL_1D(51),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_POOL_2D(52),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_POOL_2D_BACK(53),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_UPSCALE(54),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_PAD(55),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_PAD_REFLECT_1D(56),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_ARANGE(57),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_TIMESTEP_EMBEDDING(58),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_ARGSORT(59),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_LEAKY_RELU(60),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_FLASH_ATTN_EXT(61),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_FLASH_ATTN_BACK(62),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_SSM_CONV(63),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_SSM_SCAN(64),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_WIN_PART(65),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_WIN_UNPART(66),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_GET_REL_POS(67),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_ADD_REL_POS(68),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_RWKV_WKV6(69),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_GATED_LINEAR_ATTN(70),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_UNARY(71),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_MAP_UNARY(72),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_MAP_BINARY(73),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MAP_CUSTOM1_F32(74),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MAP_CUSTOM2_F32(75),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MAP_CUSTOM3_F32(76),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_OP_MAP_CUSTOM1(77),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MAP_CUSTOM2(78),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_MAP_CUSTOM3(79),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_CROSS_ENTROPY_LOSS(80),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_CROSS_ENTROPY_LOSS_BACK(81),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_OPT_STEP_ADAMW(82),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_COUNT(83);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_op(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_op fromValue(int value) => switch (value) {
        0 => GGML_OP_NONE,
        1 => GGML_OP_DUP,
        2 => GGML_OP_ADD,
        3 => GGML_OP_ADD1,
        4 => GGML_OP_ACC,
        5 => GGML_OP_SUB,
        6 => GGML_OP_MUL,
        7 => GGML_OP_DIV,
        8 => GGML_OP_SQR,
        9 => GGML_OP_SQRT,
        10 => GGML_OP_LOG,
        11 => GGML_OP_SIN,
        12 => GGML_OP_COS,
        13 => GGML_OP_SUM,
        14 => GGML_OP_SUM_ROWS,
        15 => GGML_OP_MEAN,
        16 => GGML_OP_ARGMAX,
        17 => GGML_OP_COUNT_EQUAL,
        18 => GGML_OP_REPEAT,
        19 => GGML_OP_REPEAT_BACK,
        20 => GGML_OP_CONCAT,
        21 => GGML_OP_SILU_BACK,
        22 => GGML_OP_NORM,
        23 => GGML_OP_RMS_NORM,
        24 => GGML_OP_RMS_NORM_BACK,
        25 => GGML_OP_GROUP_NORM,
        26 => GGML_OP_MUL_MAT,
        27 => GGML_OP_MUL_MAT_ID,
        28 => GGML_OP_OUT_PROD,
        29 => GGML_OP_SCALE,
        30 => GGML_OP_SET,
        31 => GGML_OP_CPY,
        32 => GGML_OP_CONT,
        33 => GGML_OP_RESHAPE,
        34 => GGML_OP_VIEW,
        35 => GGML_OP_PERMUTE,
        36 => GGML_OP_TRANSPOSE,
        37 => GGML_OP_GET_ROWS,
        38 => GGML_OP_GET_ROWS_BACK,
        39 => GGML_OP_DIAG,
        40 => GGML_OP_DIAG_MASK_INF,
        41 => GGML_OP_DIAG_MASK_ZERO,
        42 => GGML_OP_SOFT_MAX,
        43 => GGML_OP_SOFT_MAX_BACK,
        44 => GGML_OP_ROPE,
        45 => GGML_OP_ROPE_BACK,
        46 => GGML_OP_CLAMP,
        47 => GGML_OP_CONV_TRANSPOSE_1D,
        48 => GGML_OP_IM2COL,
        49 => GGML_OP_IM2COL_BACK,
        50 => GGML_OP_CONV_TRANSPOSE_2D,
        51 => GGML_OP_POOL_1D,
        52 => GGML_OP_POOL_2D,
        53 => GGML_OP_POOL_2D_BACK,
        54 => GGML_OP_UPSCALE,
        55 => GGML_OP_PAD,
        56 => GGML_OP_PAD_REFLECT_1D,
        57 => GGML_OP_ARANGE,
        58 => GGML_OP_TIMESTEP_EMBEDDING,
        59 => GGML_OP_ARGSORT,
        60 => GGML_OP_LEAKY_RELU,
        61 => GGML_OP_FLASH_ATTN_EXT,
        62 => GGML_OP_FLASH_ATTN_BACK,
        63 => GGML_OP_SSM_CONV,
        64 => GGML_OP_SSM_SCAN,
        65 => GGML_OP_WIN_PART,
        66 => GGML_OP_WIN_UNPART,
        67 => GGML_OP_GET_REL_POS,
        68 => GGML_OP_ADD_REL_POS,
        69 => GGML_OP_RWKV_WKV6,
        70 => GGML_OP_GATED_LINEAR_ATTN,
        71 => GGML_OP_UNARY,
        72 => GGML_OP_MAP_UNARY,
        73 => GGML_OP_MAP_BINARY,
        74 => GGML_OP_MAP_CUSTOM1_F32,
        75 => GGML_OP_MAP_CUSTOM2_F32,
        76 => GGML_OP_MAP_CUSTOM3_F32,
        77 => GGML_OP_MAP_CUSTOM1,
        78 => GGML_OP_MAP_CUSTOM2,
        79 => GGML_OP_MAP_CUSTOM3,
        80 => GGML_OP_CROSS_ENTROPY_LOSS,
        81 => GGML_OP_CROSS_ENTROPY_LOSS_BACK,
        82 => GGML_OP_OPT_STEP_ADAMW,
        83 => GGML_OP_COUNT,
        _ => throw ArgumentError("Unknown value for ggml_op: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_unary_op {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_UNARY_OP_ABS(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_SGN(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_NEG(2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_UNARY_OP_STEP(3),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_TANH(4),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_ELU(5),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_RELU(6),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_SIGMOID(7),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_GELU(8),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_GELU_QUICK(9),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_UNARY_OP_SILU(10),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_HARDSWISH(11),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_HARDSIGMOID(12),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_EXP(13),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_UNARY_OP_COUNT(14);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;

  const ggml_unary_op(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  static ggml_unary_op fromValue(int value) => switch (value) {
        0 => GGML_UNARY_OP_ABS,
        1 => GGML_UNARY_OP_SGN,
        2 => GGML_UNARY_OP_NEG,
        3 => GGML_UNARY_OP_STEP,
        4 => GGML_UNARY_OP_TANH,
        5 => GGML_UNARY_OP_ELU,
        6 => GGML_UNARY_OP_RELU,
        7 => GGML_UNARY_OP_SIGMOID,
        8 => GGML_UNARY_OP_GELU,
        9 => GGML_UNARY_OP_GELU_QUICK,
        10 => GGML_UNARY_OP_SILU,
        11 => GGML_UNARY_OP_HARDSWISH,
        12 => GGML_UNARY_OP_HARDSIGMOID,
        13 => GGML_UNARY_OP_EXP,
        14 => GGML_UNARY_OP_COUNT,
        _ => throw ArgumentError("Unknown value for ggml_unary_op: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_object_type {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OBJECT_TYPE_TENSOR(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OBJECT_TYPE_GRAPH(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OBJECT_TYPE_WORK_BUFFER(2);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_object_type(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_object_type fromValue(int value) => switch (value) {
        0 => GGML_OBJECT_TYPE_TENSOR,
        1 => GGML_OBJECT_TYPE_GRAPH,
        2 => GGML_OBJECT_TYPE_WORK_BUFFER,
        _ => throw ArgumentError("Unknown value for ggml_object_type: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_log_level {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_LOG_LEVEL_NONE(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_LOG_LEVEL_DEBUG(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_LOG_LEVEL_INFO(2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_LOG_LEVEL_WARN(3),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_LOG_LEVEL_ERROR(4),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_LOG_LEVEL_CONT(5);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_log_level(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_log_level fromValue(int value) => switch (value) {
        0 => GGML_LOG_LEVEL_NONE,
        1 => GGML_LOG_LEVEL_DEBUG,
        2 => GGML_LOG_LEVEL_INFO,
        3 => GGML_LOG_LEVEL_WARN,
        4 => GGML_LOG_LEVEL_ERROR,
        5 => GGML_LOG_LEVEL_CONT,
        _ => throw ArgumentError("Unknown value for ggml_log_level: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_tensor_flag {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TENSOR_FLAG_INPUT(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TENSOR_FLAG_OUTPUT(2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TENSOR_FLAG_PARAM(4),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_TENSOR_FLAG_LOSS(8);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;

  const ggml_tensor_flag(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_tensor_flag fromValue(int value) => switch (value) {
        1 => GGML_TENSOR_FLAG_INPUT,
        2 => GGML_TENSOR_FLAG_OUTPUT,
        4 => GGML_TENSOR_FLAG_PARAM,
        8 => GGML_TENSOR_FLAG_LOSS,
        _ => throw ArgumentError("Unknown value for ggml_tensor_flag: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_init_params extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Size()
  external int mem_size;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Void> mem_buffer;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Bool()
  external bool no_alloc;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_tensor extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.UnsignedInt()
  external int typeAsInt;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_type get type => ggml_type.fromValue(typeAsInt);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ggml_backend_buffer> buffer;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> ne;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Size> nb;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.UnsignedInt()
  external int opAsInt;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_op get op => ggml_op.fromValue(opAsInt);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int32> op_params;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Int32()
  external int flags;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Pointer<ggml_tensor>> src;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ggml_tensor> view_src;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  @ffi.Size()

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  external int view_offs;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Void> data;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Void> extra;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> padding;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_buffer extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_guid_t = ffi.Pointer<ffi.Pointer<ffi.Uint8>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_op_pool {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_POOL_MAX(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_POOL_AVG(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_OP_POOL_COUNT(2);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_op_pool(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_op_pool fromValue(int value) => switch (value) {
        0 => GGML_OP_POOL_MAX,
        1 => GGML_OP_POOL_AVG,
        2 => GGML_OP_POOL_COUNT,
        _ => throw ArgumentError("Unknown value for ggml_op_pool: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_sort_order {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_SORT_ORDER_ASC(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_SORT_ORDER_DESC(1);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_sort_order(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_sort_order fromValue(int value) => switch (value) {
        0 => GGML_SORT_ORDER_ASC,
        1 => GGML_SORT_ORDER_DESC,
        _ => throw ArgumentError("Unknown value for ggml_sort_order: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_unary_op_f32_t
    = ffi.Pointer<ffi.NativeFunction<ggml_unary_op_f32_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_unary_op_f32_tFunction = ffi.Void Function(
    ffi.Int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_unary_op_f32_tFunction = void Function(
    int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_binary_op_f32_t
    = ffi.Pointer<ffi.NativeFunction<ggml_binary_op_f32_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_binary_op_f32_tFunction = ffi.Void Function(ffi.Int,
    ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_binary_op_f32_tFunction = void Function(int,
    ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef ggml_custom1_op_f32_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom1_op_f32_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef ggml_custom1_op_f32_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef Dartggml_custom1_op_f32_tFunction = void Function(
    ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom2_op_f32_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom2_op_f32_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom2_op_f32_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_custom2_op_f32_tFunction = void Function(
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef ggml_custom3_op_f32_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom3_op_f32_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom3_op_f32_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef Dartggml_custom3_op_f32_tFunction = void Function(
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>,
    ffi.Pointer<ggml_tensor>);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom1_op_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom1_op_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom1_op_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Int ith,
    ffi.Int nth,
    ffi.Pointer<ffi.Void> userdata);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_custom1_op_tFunction = void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    int ith,
    int nth,
    ffi.Pointer<ffi.Void> userdata);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom2_op_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom2_op_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom2_op_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Int ith,
    ffi.Int nth,
    ffi.Pointer<ffi.Void> userdata);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef Dartggml_custom2_op_tFunction = void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int ith,
    int nth,
    ffi.Pointer<ffi.Void> userdata);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom3_op_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom3_op_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_custom3_op_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ffi.Int ith,
    ffi.Int nth,
    ffi.Pointer<ffi.Void> userdata);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_custom3_op_tFunction = void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int ith,
    int nth,
    ffi.Pointer<ffi.Void> userdata);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_log_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_log_callbackFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_log_callbackFunction = ffi.Void Function(ffi.UnsignedInt level,
    ffi.Pointer<ffi.Char> text, ffi.Pointer<ffi.Void> user_data);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_log_callbackFunction = void Function(ggml_log_level level,
    ffi.Pointer<ffi.Char> text, ffi.Pointer<ffi.Void> user_data);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_type_traits extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Char> type_name;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Int64()
  external int blck_size;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Int64()
  external int blck_size_interleave;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Size()
  external int type_size;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Bool()
  external bool is_quantized;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ggml_to_float_t to_float;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ggml_from_float_t from_float_ref;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_to_float_t
    = ffi.Pointer<ffi.NativeFunction<ggml_to_float_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
typedef ggml_to_float_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> x, ffi.Pointer<ffi.Float> y, ffi.Int64 k);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_to_float_tFunction = void Function(
    ffi.Pointer<ffi.Void> x, ffi.Pointer<ffi.Float> y, int k);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_from_float_t
    = ffi.Pointer<ffi.NativeFunction<ggml_from_float_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_from_float_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Float> x, ffi.Pointer<ffi.Void> y, ffi.Int64 k);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_from_float_tFunction = void Function(
    ffi.Pointer<ffi.Float> x, ffi.Pointer<ffi.Void> y, int k);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_sched_priority {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_SCHED_PRIO_NORMAL(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_SCHED_PRIO_MEDIUM(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_SCHED_PRIO_HIGH(2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_SCHED_PRIO_REALTIME(3);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_sched_priority(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_sched_priority fromValue(int value) => switch (value) {
        0 => GGML_SCHED_PRIO_NORMAL,
        1 => GGML_SCHED_PRIO_MEDIUM,
        2 => GGML_SCHED_PRIO_HIGH,
        3 => GGML_SCHED_PRIO_REALTIME,
        _ =>
          throw ArgumentError("Unknown value for ggml_sched_priority: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_threadpool_params extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Bool> cpumask;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Int()
  external int n_threads;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.UnsignedInt()
  external int prioAsInt;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_sched_priority get prio => ggml_sched_priority.fromValue(prioAsInt);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Uint32()
  external int poll;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Bool()
  external bool strict_cpu;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Bool()
  external bool paused;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_threadpool extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_buffer_type extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_tallocr extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ggml_backend_buffer_t buffer;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Void> base;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  @ffi.Size()
  external int alignment;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Size()
  external int offset;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_buffer_t = ffi.Pointer<ggml_backend_buffer>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_gallocr extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_gallocr_t = ffi.Pointer<ggml_gallocr>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_buffer_type_t = ffi.Pointer<ggml_backend_buffer_type>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_t = ffi.Pointer<ggml_backend>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_event extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_reg extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_device extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_dev_t = ffi.Pointer<ggml_backend_device>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_backend_buffer_usage {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_BACKEND_BUFFER_USAGE_ANY(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_BACKEND_BUFFER_USAGE_WEIGHTS(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_BACKEND_BUFFER_USAGE_COMPUTE(2);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_backend_buffer_usage(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_backend_buffer_usage fromValue(int value) => switch (value) {
        0 => GGML_BACKEND_BUFFER_USAGE_ANY,
        1 => GGML_BACKEND_BUFFER_USAGE_WEIGHTS,
        2 => GGML_BACKEND_BUFFER_USAGE_COMPUTE,
        _ => throw ArgumentError(
            "Unknown value for ggml_backend_buffer_usage: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_graph_plan_t = ffi.Pointer<ffi.Void>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_event_t = ffi.Pointer<ggml_backend_event>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_backend_dev_type {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_BACKEND_DEVICE_TYPE_CPU(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_BACKEND_DEVICE_TYPE_GPU(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_BACKEND_DEVICE_TYPE_ACCEL(2);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_backend_dev_type(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_backend_dev_type fromValue(int value) => switch (value) {
        0 => GGML_BACKEND_DEVICE_TYPE_CPU,
        1 => GGML_BACKEND_DEVICE_TYPE_GPU,
        2 => GGML_BACKEND_DEVICE_TYPE_ACCEL,
        _ => throw ArgumentError(
            "Unknown value for ggml_backend_dev_type: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_dev_caps extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Bool()
  external bool async1;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Bool()
  external bool host_buffer;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Bool()
  external bool buffer_from_host_ptr;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Bool()
  external bool events;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_dev_props extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Char> name;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Char> description;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Size()
  external int memory_free;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Size()
  external int memory_total;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.UnsignedInt()
  external int typeAsInt;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_backend_dev_type get type => ggml_backend_dev_type.fromValue(typeAsInt);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ggml_backend_dev_caps caps;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_reg_t = ffi.Pointer<ggml_backend_reg>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_feature extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Char> name;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Char> value;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_sched extends ffi.Opaque {}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_sched_t = ffi.Pointer<ggml_backend_sched>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_sched_eval_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_backend_sched_eval_callbackFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_sched_eval_callbackFunction = ffi.Bool Function(
    ffi.Pointer<ggml_tensor> t, ffi.Bool ask, ffi.Pointer<ffi.Void> user_data);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_backend_sched_eval_callbackFunction = bool Function(
    ffi.Pointer<ggml_tensor> t, bool ask, ffi.Pointer<ffi.Void> user_data);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_backend_graph_copy extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ggml_backend_buffer_t buffer;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ggml_context> ctx_allocated;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ggml_context> ctx_unallocated;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ggml_cgraph> graph;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_eval_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_backend_eval_callbackFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_backend_eval_callbackFunction = ffi.Bool Function(
    ffi.Int node_index,
    ffi.Pointer<ggml_tensor> t1,
    ffi.Pointer<ggml_tensor> t2,
    ffi.Pointer<ffi.Void> user_data);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_backend_eval_callbackFunction = bool Function(
    int node_index,
    ffi.Pointer<ggml_tensor> t1,
    ffi.Pointer<ggml_tensor> t2,
    ffi.Pointer<ffi.Void> user_data);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_cplan extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Size()
  external int work_size;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Uint8> work_data;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Int()
  external int n_threads;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ggml_threadpool> threadpool;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ggml_abort_callback abort_callback;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ffi.Pointer<ffi.Void> abort_callback_data;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_abort_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_abort_callbackFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_abort_callbackFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Void> data);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_abort_callbackFunction = bool Function(
    ffi.Pointer<ffi.Void> data);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

enum ggml_numa_strategy {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_NUMA_STRATEGY_DISABLED(0),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
  GGML_NUMA_STRATEGY_DISTRIBUTE(1),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_NUMA_STRATEGY_ISOLATE(2),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_NUMA_STRATEGY_NUMACTL(3),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_NUMA_STRATEGY_MIRROR(4),

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  GGML_NUMA_STRATEGY_COUNT(5);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  final int value;
  const ggml_numa_strategy(this.value);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  static ggml_numa_strategy fromValue(int value) => switch (value) {
        0 => GGML_NUMA_STRATEGY_DISABLED,
        1 => GGML_NUMA_STRATEGY_DISTRIBUTE,
        2 => GGML_NUMA_STRATEGY_ISOLATE,
        3 => GGML_NUMA_STRATEGY_NUMACTL,
        4 => GGML_NUMA_STRATEGY_MIRROR,
        5 => GGML_NUMA_STRATEGY_COUNT,
        _ =>
          throw ArgumentError("Unknown value for ggml_numa_strategy: $value"),
      };
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

final class ggml_type_traits_cpu extends ffi.Struct {
  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ggml_from_float_t from_float;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  external ggml_vec_dot_t vec_dot;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.UnsignedInt()
  external int vec_dot_typeAsInt;

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  ggml_type get vec_dot_type => ggml_type.fromValue(vec_dot_typeAsInt);

  /// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

  @ffi.Int64()
  external int nrows;
}

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_vec_dot_t
    = ffi.Pointer<ffi.NativeFunction<ggml_vec_dot_tFunction>>;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_vec_dot_tFunction = ffi.Void Function(
    ffi.Int n,
    ffi.Pointer<ffi.Float> s,
    ffi.Size bs,
    ffi.Pointer<ffi.Void> x,
    ffi.Size bx,
    ffi.Pointer<ffi.Void> y,
    ffi.Size by,
    ffi.Int nrc);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef Dartggml_vec_dot_tFunction = void Function(
    int n,
    ffi.Pointer<ffi.Float> s,
    int bs,
    ffi.Pointer<ffi.Void> x,
    int bx,
    ffi.Pointer<ffi.Void> y,
    int by,
    int nrc);

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

typedef ggml_threadpool_t = ffi.Pointer<ggml_threadpool>;

const int __bool_true_false_are_defined = 1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int true1 = 1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int false1 = 0;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int NULL = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC23 = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_TIME_BITS64 = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C23_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 40;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT8_MIN = -128;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT16_MIN = -32768;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT32_MIN = -2147483648;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT64_MIN = -9223372036854775808;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT8_MAX = 127;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT16_MAX = 32767;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT32_MAX = 2147483647;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT64_MAX = 9223372036854775807;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT8_MAX = 255;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT16_MAX = 65535;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT32_MAX = 4294967295;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT64_MAX = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_LEAST8_MIN = -128;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int INT_LEAST16_MIN = -32768;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_LEAST32_MIN = -2147483648;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_LEAST64_MIN = -9223372036854775808;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_LEAST8_MAX = 127;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_LEAST16_MAX = 32767;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_LEAST32_MAX = 2147483647;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_LEAST64_MAX = 9223372036854775807;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT_LEAST8_MAX = 255;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT_LEAST16_MAX = 65535;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT_LEAST32_MAX = 4294967295;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT_LEAST64_MAX = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_FAST8_MIN = -128;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_FAST16_MIN = -9223372036854775808;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_FAST32_MIN = -9223372036854775808;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_FAST64_MIN = -9223372036854775808;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_FAST8_MAX = 127;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_FAST16_MAX = 9223372036854775807;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_FAST32_MAX = 9223372036854775807;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INT_FAST64_MAX = 9223372036854775807;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT_FAST8_MAX = 255;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT_FAST16_MAX = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT_FAST32_MAX = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int UINT_FAST64_MAX = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int INTPTR_MIN = -9223372036854775808;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int INTPTR_MAX = 9223372036854775807;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int UINTPTR_MAX = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int INTMAX_MIN = -9223372036854775808;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int INTMAX_MAX = 9223372036854775807;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int UINTMAX_MAX = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int PTRDIFF_MIN = -9223372036854775808;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int PTRDIFF_MAX = 9223372036854775807;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int SIG_ATOMIC_MIN = -2147483648;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int SIG_ATOMIC_MAX = 2147483647;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int SIZE_MAX = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int WCHAR_MIN = -2147483648;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int WCHAR_MAX = 2147483647;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int WINT_MIN = 0;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int WINT_MAX = 4294967295;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int __cookie_io_functions_t_defined = 1;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int BUFSIZ = 8192;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int EOF = -1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int SEEK_SET = 0;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int SEEK_CUR = 1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int SEEK_END = 2;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const String P_tmpdir = '/tmp';

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int L_tmpnam = 20;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int TMP_MAX = 238328;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int _BITS_STDIO_LIM_H = 1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int FILENAME_MAX = 4096;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int L_ctermid = 9;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int FOPEN_MAX = 16;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_FILE_MAGIC = 1734831468;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_FILE_VERSION = 2;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_QNT_VERSION = 2;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_QNT_VERSION_FACTOR = 1000;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int GGML_MAX_DIMS = 4;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int GGML_MAX_PARAMS = 2048;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_MAX_SRC = 10;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_MAX_N_THREADS = 512;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_MAX_OP_PARAMS = 64;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_MAX_NAME = 64;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_DEFAULT_N_THREADS = 4;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_DEFAULT_GRAPH_SIZE = 2048;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_MEM_ALIGN = 16;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_EXIT_SUCCESS = 0;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_EXIT_ABORTED = 1;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int GGML_ROPE_TYPE_NEOX = 2;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int GGML_ROPE_TYPE_MROPE = 8;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
const int GGML_ROPE_TYPE_VISION = 24;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int GGML_KQ_MASK_PAD = 64;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer

const int GGML_N_TASKS_MAX = -1;
